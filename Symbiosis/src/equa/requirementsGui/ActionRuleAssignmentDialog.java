/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package equa.requirementsGui;

import equa.meta.objectmodel.ActionPermission;
import equa.meta.objectmodel.FactType;
import equa.meta.objectmodel.ObjectModel;
import equa.meta.objectmodel.ObjectRole;
import equa.meta.objectmodel.ObjectType;
import equa.meta.objectmodel.Role;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EventListener;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

/**
 *
 * @author frankpeeters
 */
public class ActionRuleAssignmentDialog extends javax.swing.JDialog {

    private final ObjectModel om;
    private ActionPermission actionPermission;
    private FactType booleanFactType;
    private ObjectRole objectRole;
    

    /**
     * Creates new form RuleAssignmentDialog
     *
     * @param parent
     * @param modal
     * @param om
     */
    public ActionRuleAssignmentDialog(java.awt.Frame parent, boolean modal, ObjectModel om) {
        super(parent, modal);
        this.om = om;
        initComponents();
        initBooleanFactTypes();
    }

    private void initBooleanFactTypes() {
        FactTypeListModel model = new FactTypeListModel();
        List<String> unaryFactTypes = new ArrayList<>();
        for (FactType ft : om.getFactTypes()) {
            if (ft.size() == 1 && !ft.isObjectType()) {
                unaryFactTypes.add(ft.getName());
            }
        }
        model.setFactTypes(unaryFactTypes);
        listBooleanFactTypes.setModel(model);
        
    }

    public ActionPermission getActionPermission() {
        return actionPermission;
    }

    public FactType getUnaryFactType() {
        return booleanFactType;
    }

    public ObjectRole getObjectRole() {
        return objectRole;
    }

    final class FactTypeListModel implements ListModel<String> {

        private List<String> factTypes;
        private final EventListenerList eventListenerList;

        public FactTypeListModel() {
            factTypes = new ArrayList<>();
            eventListenerList = new EventListenerList();
        }

        @Override
        public int getSize() {
            return factTypes.size();
        }

        @Override
        public String getElementAt(int i) {
            if (i < 0 || i >= factTypes.size()) {
                return null;
            } else {
                return factTypes.get(i);
            }
        }

        @Override
        public void addListDataListener(ListDataListener ll) {
            eventListenerList.add(ListDataListener.class, ll);
        }

        @Override
        public void removeListDataListener(ListDataListener ll) {
            eventListenerList.remove(ListDataListener.class, ll);
        }

        public void fireListChanged() {
            EventListener[] listeners = eventListenerList.getListeners(ListDataListener.class);
            for (EventListener l : listeners) {
                ((ListDataListener) l).contentsChanged(new ListDataEvent(this, ListDataEvent.CONTENTS_CHANGED, 0, 0));
            }
        }

        public void setFactTypes(List<String> ots) {
            factTypes = ots;
            fireListChanged();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listFactTypes = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        listRoles = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        listPlayingRoles = new javax.swing.JList();
        btOk = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        listBooleanFactTypes = new javax.swing.JList();
        tfActionPermission = new javax.swing.JTextField();
        btRemove = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(100, 100));
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        listFactTypes.setBorder(javax.swing.BorderFactory.createTitledBorder("FactTypes"));
        listFactTypes.setModel(om);
        listFactTypes.setName("listFactTypes"); // NOI18N
        listFactTypes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listFactTypesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listFactTypes);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        listRoles.setBorder(javax.swing.BorderFactory.createTitledBorder("ActionPermission Role"));
        listRoles.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listRoles.setName("listRoles"); // NOI18N
        listRoles.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listRolesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listRoles);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        listPlayingRoles.setBorder(javax.swing.BorderFactory.createTitledBorder("Playing Roles"));
        listPlayingRoles.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listPlayingRoles.setName("listPlayingRoles"); // NOI18N
        jScrollPane3.setViewportView(listPlayingRoles);

        btOk.setText("Ok");
        btOk.setName("btOk"); // NOI18N
        btOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOkActionPerformed(evt);
            }
        });

        btCancel.setText("Cancel");
        btCancel.setName("btCancel"); // NOI18N
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });

        jScrollPane4.setMinimumSize(new java.awt.Dimension(100, 100));
        jScrollPane4.setName("jScrollPane4"); // NOI18N

        listBooleanFactTypes.setBorder(javax.swing.BorderFactory.createTitledBorder("Boolean FactTypes"));
        listBooleanFactTypes.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listBooleanFactTypes.setName("listBooleanFactTypes"); // NOI18N
        listBooleanFactTypes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listBooleanFactTypesValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(listBooleanFactTypes);

        tfActionPermission.setName("tfActionPermission"); // NOI18N

        btRemove.setText("Remove");
        btRemove.setName("btRemove"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                            .addComponent(jScrollPane3)
                            .addComponent(tfActionPermission)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btOk)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfActionPermission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btOk)
                    .addComponent(btCancel)
                    .addComponent(btRemove)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listFactTypesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listFactTypesValueChanged

        FactType ft = (FactType) listFactTypes.getSelectedValue();
        if (ft == null) {
            return;
        }
        listRoles.setModel(ft);

    }//GEN-LAST:event_listFactTypesValueChanged

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        actionPermission = null;
        objectRole = null;
        booleanFactType = null;
        setVisible(false);
    }//GEN-LAST:event_btCancelActionPerformed

    private void btOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOkActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btOkActionPerformed

    private void listRolesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listRolesValueChanged
        Role role = (Role) listRoles.getSelectedValue();
        if (role == null) {
            return;
        }

        if (role instanceof ObjectRole) {
            ObjectRole objectRole = (ObjectRole) role;
            ArrayList<ActionPermission> actionPermissions = new ArrayList<>();
            if (objectRole.isAddable()) {
                actionPermissions.add(objectRole.getAddable());
            }
            if (objectRole.isRemovable()) {
                actionPermissions.add(objectRole.getRemovable());
            }
            if (objectRole.isInsertable()) {
                actionPermissions.add(objectRole.getInsertable());
            }
            if (objectRole.isSettable()) {
                actionPermissions.add(objectRole.getSettable());
            }
            if (objectRole.isAdjustable()) {
                actionPermissions.add(objectRole.getAdjustable());
            }
            if (actionPermissions.isEmpty()) {
                return;
            }
            if (actionPermissions.size() == 1) {
                actionPermission = actionPermissions.get(0);
            } else {
                Object[] options = actionPermissions.toArray();
                int result = JOptionPane.showOptionDialog(this, "select action permission", null, 0, JOptionPane.QUESTION_MESSAGE, null, options, null);
                if (result >= 0 && result < actionPermissions.size()) {
                    actionPermission = actionPermissions.get(result);
                }
            }
        }
    }//GEN-LAST:event_listRolesValueChanged

    private void listBooleanFactTypesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listBooleanFactTypesValueChanged
        FactType ft = (FactType) listFactTypes.getSelectedValue();
        if (ft == null) {
            return;
        }

        ObjectType ot = (ObjectType) ft.getRole(0).getSubstitutionType();
        List<Role> playsRoles = ot.getPlaysRoles();
        if (playsRoles.isEmpty()) {
            return;
        }
        Object[] options = playsRoles.toArray();
        int result = JOptionPane.showOptionDialog(this, "select object role which need to be constrained", null, 0, JOptionPane.QUESTION_MESSAGE, null, options, null);
        if (result >= 0 && result < playsRoles.size()) {
            objectRole = (ObjectRole) playsRoles.get(result);
        }
    }//GEN-LAST:event_listBooleanFactTypesValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btOk;
    private javax.swing.JButton btRemove;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList listBooleanFactTypes;
    private javax.swing.JList listFactTypes;
    private javax.swing.JList listPlayingRoles;
    private javax.swing.JList listRoles;
    private javax.swing.JTextField tfActionPermission;
    // End of variables declaration//GEN-END:variables
}
