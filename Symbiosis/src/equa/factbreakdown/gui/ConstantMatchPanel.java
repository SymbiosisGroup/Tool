 /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConstantPanel.java
 *
 * Created on 23-mei-2011, 15:16:38
 */
package equa.factbreakdown.gui;

import java.awt.Color;

/**
 *
 * @author FrankP
 */
public class ConstantMatchPanel extends MatchPanel {

    public static final char RIGHT = '}';
    public static final char LEFT = '{';
    private static final long serialVersionUID = 1L;
    private SubstitutionMatchPanel next;
    private SubstitutionMatchPanel previous;

    /**
     * Creates new form ConstantPanel
     */
    public ConstantMatchPanel(String defined, SubstitutionMatchPanel previous) {
        initComponents();

        setText(defined);

        next = null;
        this.previous = previous;
        tfConstant.select(0, 0);
        if (previous == null) {
            btLeft.setEnabled(false);
        }
        if (next == null) {
            btRight.setEnabled(false);
        }

    }

    @Override
    public String getText() {
        String constant = tfConstant.getText();
        return constant.substring(1, constant.length() - 1);
    }

    void setText(String text) {
        tfConstant.setText(LEFT + text + RIGHT);
    }

    public void setNext(SubstitutionMatchPanel panel) {
        next = panel;

        btRight.setEnabled(next != null);

    }

    @Override
    public SubstitutionMatchPanel getNext() {
        return next;
    }

    @Override
    public SubstitutionMatchPanel getPrevious() {
        return next;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnChange = new javax.swing.JPanel();
        btLeft = new javax.swing.JButton();
        btRight = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        tfConstant = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setMinimumSize(new java.awt.Dimension(58, 31));
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(150, 30));
        setLayout(new java.awt.BorderLayout());

        pnChange.setMinimumSize(new java.awt.Dimension(28, 29));
        pnChange.setName("pnChange"); // NOI18N
        pnChange.setPreferredSize(new java.awt.Dimension(30, 30));
        pnChange.setLayout(new java.awt.BorderLayout());

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(ConstantMatchPanel.class);
        btLeft.setText(resourceMap.getString("btLeft.text")); // NOI18N
        btLeft.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btLeft.setMaximumSize(new java.awt.Dimension(14, 26));
        btLeft.setMinimumSize(new java.awt.Dimension(14, 26));
        btLeft.setName("btLeft"); // NOI18N
        btLeft.setPreferredSize(new java.awt.Dimension(15, 15));
        btLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLeftActionPerformed(evt);
            }
        });
        pnChange.add(btLeft, java.awt.BorderLayout.WEST);

        btRight.setText(resourceMap.getString("btRight.text")); // NOI18N
        btRight.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btRight.setMaximumSize(new java.awt.Dimension(14, 26));
        btRight.setMinimumSize(new java.awt.Dimension(14, 26));
        btRight.setName("btRight"); // NOI18N
        btRight.setPreferredSize(new java.awt.Dimension(15, 15));
        btRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRightActionPerformed(evt);
            }
        });
        pnChange.add(btRight, java.awt.BorderLayout.CENTER);

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setEnabled(false);
        jButton1.setName("jButton1"); // NOI18N
        jButton1.setPreferredSize(new java.awt.Dimension(30, 15));
        pnChange.add(jButton1, java.awt.BorderLayout.PAGE_END);

        add(pnChange, java.awt.BorderLayout.WEST);

        tfConstant.setBackground(resourceMap.getColor("tfConstant.background")); // NOI18N
        tfConstant.setFont(resourceMap.getFont("tfConstant.font")); // NOI18N
        tfConstant.setText(resourceMap.getString("tfConstant.text")); // NOI18N
        tfConstant.setToolTipText(resourceMap.getString("tfConstant.toolTipText")); // NOI18N
        tfConstant.setMaximumSize(new java.awt.Dimension(2147483647, 26));
        tfConstant.setName("tfConstant"); // NOI18N
        tfConstant.setPreferredSize(new java.awt.Dimension(47, 15));
        tfConstant.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                tfConstantMouseDragged(evt);
            }
        });
        tfConstant.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfConstantMouseClicked(evt);
            }
        });
        tfConstant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfConstantActionPerformed(evt);
            }
        });
        add(tfConstant, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void tfConstantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfConstantActionPerformed
        moveTextRight();
    }

    private void moveTextRight() {
        int caretPosition = tfConstant.getCaretPosition();
        String delimitedText = tfConstant.getText();
        int delimitedTextLength = delimitedText.length();
        if (caretPosition == 0 || caretPosition >= delimitedTextLength -1) {
            return;
        }
        
        int split = caretPosition-1;
        String text = getText();
        int textLength = text.length();
        while (split < textLength && Character.isWhitespace(text.charAt(split))) {
            split++;
        }
        String toMove = text.substring(split);
        setText(text.substring(0, split));
        next.appendFrontEnd(toMove);
    }

    private void moveTextLeft() {
        int caretPosition = tfConstant.getCaretPosition();
        if (caretPosition==0) return;
        String text = getText();
        caretPosition--;
        
        while (caretPosition > 0 && Character.isWhitespace(text.charAt(caretPosition - 1))) {
            caretPosition--;
        }
        String toMove = text.substring(0, caretPosition);
        setText(text.substring(caretPosition));
        previous.appendBackEnd(toMove);

    }//GEN-LAST:event_tfConstantActionPerformed

    private void tfConstantMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfConstantMouseDragged

    }//GEN-LAST:event_tfConstantMouseDragged

    private void tfConstantMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfConstantMouseClicked

    }//GEN-LAST:event_tfConstantMouseClicked

    private void btRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRightActionPerformed
        moveTextRight();
    }//GEN-LAST:event_btRightActionPerformed

    private void btLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLeftActionPerformed
        moveTextLeft();
    }//GEN-LAST:event_btLeftActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btLeft;
    private javax.swing.JButton btRight;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel pnChange;
    private javax.swing.JTextField tfConstant;
    // End of variables declaration//GEN-END:variables

    @Override
    void appendFrontEnd(String toMove) {
        setText(toMove + getText());
    }

    void setColor(Color color) {
        tfConstant.setBackground(color);
    }

    @Override
    void appendBackEnd(String toMove) {
        setText(getText() + toMove);
    }
}
