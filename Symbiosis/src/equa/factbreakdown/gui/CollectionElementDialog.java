/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package equa.factbreakdown.gui;

import equa.util.Naming;
import java.awt.Frame;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;

/**
 *
 * @author frankpeeters
 */
public class CollectionElementDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form SeparatorDialog
     *
     * @param parent
     * @param modal
     * @param collection
     * @param begin
     * @param separator
     * @param end
     * @param elementName
     * @param elementRoleName
     */
    public CollectionElementDialog(Frame parent, boolean modal,
            String collection, String begin, String separator, String end,
            String elementName, String elementRoleName) {
        super(parent, modal);
        initComponents();
        taCollection.setText(collection.trim());
        taCollection.requestFocus();
        tfBegin.setText(begin);
        tfSeparator.setText(separator);
        tfEnd.setText(end);
        tfElementType.setText(elementName);
        tfRoleName.setText(elementRoleName);
        setTitle("Please select first element");
        //parseTokens();
    }

    final void parseTokens() {
        String collection = taCollection.getText().trim();
        if (collection.isEmpty()) {
            return;
        }

        String[] tokensDirty = collection.split("[,. \t\n]");
        ArrayList<String> tokens = new ArrayList<>();
        for (String token : tokensDirty) {
            if (!token.isEmpty()) {
                tokens.add(token);
            }
        }

        if (tokens.size() <= 1) {
            tfBegin.setText("");
            tfSeparator.setText("unknown");
            tfEnd.setText("");
        } else if (tokens.size() == 2) {
            tfBegin.setText("");
            int sepBegin, sepEnd;
            sepBegin = collection.indexOf(tokens.get(0)) + tokens.get(0).length();
            sepEnd = collection.indexOf(tokens.get(1), sepBegin);
            tfSeparator.setText(spaceToUnderscore(collection.substring(sepBegin, sepEnd)));
            tfEnd.setText("");
        } else {
            tfBegin.setText(spaceToUnderscore(tokens.get(0)));
            int sepBegin, sepEnd;
            sepBegin = collection.indexOf(tokens.get(1), tokens.get(0).length()) + tokens.get(1).length();
            sepEnd = collection.indexOf(tokens.get(2), sepBegin);
            tfSeparator.setText(spaceToUnderscore(collection.substring(sepBegin, sepEnd)));
            tfSeparator.setText("unknown");
            tfEnd.setText(spaceToUnderscore(tokens.get(tokens.size() - 1)));
        }
        tfElementType.requestFocus();
    }

    static String spaceToUnderscore(String text) {

        return text.replace(' ', '_');
    }

    static String underscoreToSpace(String text) {
        return text.replace('_', ' ');
    }

    public String getBegin() {
        return underscoreToSpace(tfBegin.getText());
    }

    public String getSeparator() {
        return underscoreToSpace(tfSeparator.getText());
    }

    public String getEnd() {
        return underscoreToSpace(tfEnd.getText());
    }

    public String getCollection() {
        return taCollection.getText();
    }

    public String getElementType() {
        return tfElementType.getText();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btOk = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();
        tfSeparator = new javax.swing.JTextField();
        lbSparator = new javax.swing.JLabel();
        lbEnd = new javax.swing.JLabel();
        tfEnd = new javax.swing.JTextField();
        lbBegin = new javax.swing.JLabel();
        tfBegin = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        taCollection = new javax.swing.JTextArea();
        lbElementType = new javax.swing.JLabel();
        tfElementType = new javax.swing.JTextField();
        lbElementType1 = new javax.swing.JLabel();
        tfRoleName = new javax.swing.JTextField();
        btFirstElement = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btOk.setText("Ok");
        btOk.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOkActionPerformed(evt);
            }
        });

        btCancel.setText("Cancel");
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });

        lbSparator.setText("Separator");

        lbEnd.setText("End Token");

        lbBegin.setText("Begin Token");

        taCollection.setColumns(20);
        taCollection.setRows(5);
        taCollection.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
			public void mouseReleased(java.awt.event.MouseEvent evt) {
                taCollectionMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(taCollection);

        lbElementType.setText("Element Type");

        tfElementType.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfElementTypeActionPerformed(evt);
            }
        });

        lbElementType1.setText("Element Role");

        tfRoleName.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfRoleNameActionPerformed(evt);
            }
        });

        btFirstElement.setText("First Element Selected");
        btFirstElement.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFirstElementActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lbElementType1)
                    .add(lbElementType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbEnd)
                    .add(lbSparator)
                    .add(lbBegin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tfEnd)
                            .add(tfSeparator)))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tfBegin))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, tfRoleName)
                            .add(tfElementType)))))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1))
            .add(layout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(btOk)
                .add(18, 18, 18)
                .add(btCancel)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(btFirstElement)
                .add(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(btFirstElement)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tfBegin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbBegin))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tfSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbSparator))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tfEnd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbEnd))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tfElementType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbElementType))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tfRoleName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbElementType1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btOk)
                    .add(btCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOkActionPerformed

        if (tfSeparator.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this.getParent(), "please try to select the first element of the collection,"
                    + " separator cannot be empty");
        } else if (tfElementType.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this.getParent(),
                    "please enter the name of the element type");
        } else {
            setVisible(false);
        }
    }//GEN-LAST:event_btOkActionPerformed

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        tfBegin.setText("");
        tfSeparator.setText("");
        tfEnd.setText("");
        tfElementType.setText("");
        setVisible(false);
    }//GEN-LAST:event_btCancelActionPerformed

    private void tfElementTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfElementTypeActionPerformed
        btOkActionPerformed(evt);
    }//GEN-LAST:event_tfElementTypeActionPerformed

    private void tfRoleNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfRoleNameActionPerformed
        btOkActionPerformed(evt);
    }//GEN-LAST:event_tfRoleNameActionPerformed

    private void btFirstElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFirstElementActionPerformed
        scanTokens();

    }//GEN-LAST:event_btFirstElementActionPerformed

    private void taCollectionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taCollectionMouseReleased
        scanTokens();
        taCollection.setSelectionEnd(taCollection.getSelectionStart());
    }//GEN-LAST:event_taCollectionMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btFirstElement;
    private javax.swing.JButton btOk;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbBegin;
    private javax.swing.JLabel lbElementType;
    private javax.swing.JLabel lbElementType1;
    private javax.swing.JLabel lbEnd;
    private javax.swing.JLabel lbSparator;
    private javax.swing.JTextArea taCollection;
    private javax.swing.JTextField tfBegin;
    private javax.swing.JTextField tfElementType;
    private javax.swing.JTextField tfEnd;
    private javax.swing.JTextField tfRoleName;
    private javax.swing.JTextField tfSeparator;
    // End of variables declaration//GEN-END:variables

    String getElementRole() {
        if (tfRoleName.getText().isEmpty()) {
            return Naming.withoutCapital(tfElementType.getText());
        }
        return tfRoleName.getText();
    }

    private void scanTokens() {
        String selection = taCollection.getSelectedText();
        if (selection == null || selection.isEmpty()) {
        } else {
            String collection = taCollection.getText();
            int from = collection.indexOf(selection);
            int unto = from + selection.length();
            tfBegin.setText(spaceToUnderscore(collection.substring(0, from)));

            StringTokenizer tokenizer = new StringTokenizer(collection.substring(unto));

            if (tokenizer.hasMoreTokens()) {
                String separator;
                separator = " " + tokenizer.nextToken() + " ";
                tfSeparator.setText(spaceToUnderscore(separator));
                from = collection.indexOf(separator);

                while (from != -1) {
                    unto = from + separator.length();
                    from = collection.indexOf(separator, unto);
                }

                tokenizer = new StringTokenizer(collection.substring(unto));
                if (tokenizer.hasMoreTokens()) {
                    unto += tokenizer.nextToken().length();
                    tfEnd.setText(collection.substring(unto));
                } else {
                    tfEnd.setText("");
                }
            }
            int sepUnto = collection.indexOf(" ", unto);

            tfElementType.requestFocus();
        }
    }
}
