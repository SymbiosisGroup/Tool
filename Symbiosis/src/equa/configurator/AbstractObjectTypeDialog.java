/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InheritanceDialog.java
 *
 * Created on 7-nov-2012, 15:10:47
 */
package equa.configurator;

import java.util.ArrayList;
import java.util.EventListener;
import java.util.Iterator;
import java.util.List;

import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

import equa.meta.ChangeNotAllowedException;
import equa.meta.DuplicateException;
import equa.meta.objectmodel.FactType;
import equa.meta.objectmodel.ObjectModel;
import equa.meta.objectmodel.ObjectType;
import equa.meta.traceability.ExternalInput;

/**
 *
 * @author frankpeeters
 */
public final class AbstractObjectTypeDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;
    public static final String NONE = "-none-";
    private final ObjectModel om;
    private List<String> objectTypesAll;
    private final ObjectTypeListModel subModel;
    private final ObjectTypeListModel superModel;

    final class ObjectTypeListModel implements ListModel<String> {

        private List<String> objectTypes;
        private final EventListenerList eventListenerList;

        public ObjectTypeListModel() {
            objectTypes = objectTypesAll;

            eventListenerList = new EventListenerList();
        }

        @Override
        public int getSize() {
            return objectTypes.size();
        }

        @Override
        public String getElementAt(int i) {
            if (i < 0 || i >= objectTypes.size()) {
                return null;
            } else {
                return objectTypes.get(i);
            }
        }

        @Override
        public void addListDataListener(ListDataListener ll) {
            eventListenerList.add(ListDataListener.class, ll);
        }

        @Override
        public void removeListDataListener(ListDataListener ll) {
            eventListenerList.remove(ListDataListener.class, ll);
        }

        public void fireListChanged() {
            EventListener[] listeners = eventListenerList.getListeners(ListDataListener.class);
            for (EventListener l : listeners) {
                ((ListDataListener) l).contentsChanged(new ListDataEvent(this, ListDataEvent.CONTENTS_CHANGED, 0, 0));
            }
        }

        public void setObjectTypes(List<String> ots) {
            objectTypes = ots;
            objectTypes.add(0, NONE);
            fireListChanged();
        }

        public void setObjectTypesAll() {
            objectTypes = objectTypesAll;
            fireListChanged();
        }
    }

    /**
     * Creates new form InheritanceDialog
     */
    public AbstractObjectTypeDialog(java.awt.Frame parent, boolean modal, ObjectModel om) {
        super(parent, modal);
        initComponents();

        this.om = om;
        refreshObjectModel();
        subModel = new ObjectTypeListModel();
        listSubTypes.setModel(subModel);
        superModel = new ObjectTypeListModel();
        listSuperTypes.setModel(superModel);
    }

    public void refreshObjectModel() {
        objectTypesAll = new ArrayList<>();
        objectTypesAll.add(NONE);
        for (FactType ft : om.types()) {
            if (ft.isObjectType() && !ft.isGenerated()) {
                objectTypesAll.add(ft.getName());
            }
        }
    }

    public void refreshAll() {
        refreshObjectModel();
        listSubTypes.setSelectedIndex(0);
        listSuperTypes.setSelectedIndex(0);
        refreshList(listSubTypes, listSuperTypes, subModel);
        refreshList(listSuperTypes, listSubTypes, superModel);
        tfNewType.setText("");
    }

    private void refreshList(JList<String> list, JList<String> otherList, ObjectTypeListModel model) {
        if (otherList.isSelectionEmpty() || otherList.getSelectedValue().equals(NONE)) {
            model.setObjectTypesAll();
        } else {
            ObjectType ot = om.getFactType(otherList.getSelectedValue()).getObjectType();
            List<String> ots = new ArrayList<>();
            Iterator<ObjectType> itOts;
            if (list == listSubTypes) {
                itOts = ot.subtypes();
            } else {
                itOts = ot.supertypes();
            }
            while (itOts.hasNext()) {
                ots.add(itOts.next().getName());
            }
            model.setObjectTypes(ots);
        }
        list.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfNewType = new javax.swing.JTextField();
        btInheritance = new javax.swing.JButton();
        btClose = new javax.swing.JButton();
        btHelp = new javax.swing.JButton();
        spJustification = new javax.swing.JScrollPane();
        taJustification = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        listSubTypes = new javax.swing.JList<String>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listSuperTypes = new javax.swing.JList<String>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(equa.desktop.Symbiosis.class).getContext().getResourceMap(AbstractObjectTypeDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        tfNewType.setText(resourceMap.getString("tfNewType.text")); // NOI18N
        tfNewType.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("tfNewType.border.title"))); // NOI18N
        tfNewType.setName("tfNewType"); // NOI18N

        btInheritance.setText(resourceMap.getString("btInheritance.text")); // NOI18N
        btInheritance.setName("btInheritance"); // NOI18N
        btInheritance.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInheritanceActionPerformed(evt);
            }
        });

        btClose.setText(resourceMap.getString("btClose.text")); // NOI18N
        btClose.setName("btClose"); // NOI18N
        btClose.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCloseActionPerformed(evt);
            }
        });

        btHelp.setText(resourceMap.getString("btHelp.text")); // NOI18N
        btHelp.setName("btHelp"); // NOI18N
        btHelp.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btHelpActionPerformed(evt);
            }
        });

        spJustification.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("spJustification.border.title"))); // NOI18N
        spJustification.setName("spJustification"); // NOI18N

        taJustification.setColumns(20);
        taJustification.setRows(5);
        taJustification.setName("taJustification"); // NOI18N
        spJustification.setViewportView(taJustification);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        listSubTypes.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("listSubTypes.border.title"))); // NOI18N
        listSubTypes.setForeground(resourceMap.getColor("listSubTypes.foreground")); // NOI18N
        listSubTypes.setModel(new javax.swing.AbstractListModel<String>() {
            private static final long serialVersionUID = 1L;
            String[] strings = {"Item 1", "Item 2", "Item 3", "Item 4", "Item 5"};

            @Override
            public int getSize() {
                return strings.length;
            }

            @Override
            public String getElementAt(int i) {
                return strings[i];
            }
        });
        listSubTypes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listSubTypes.setName("listSubTypes"); // NOI18N
        listSubTypes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listSubTypesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listSubTypes);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        listSuperTypes.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("listSuperTypes.border.title"))); // NOI18N
        listSuperTypes.setForeground(resourceMap.getColor("listSuperTypes.foreground")); // NOI18N
        listSuperTypes.setModel(new javax.swing.AbstractListModel<String>() {
            private static final long serialVersionUID = 1L;
            String[] strings = {"Item 1", "Item 2", "Item 3", "Item 4", "Item 5"};

            @Override
            public int getSize() {
                return strings.length;
            }

            @Override
            public String getElementAt(int i) {
                return strings[i];
            }
        });
        listSuperTypes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listSuperTypes.setName("listSuperTypes"); // NOI18N
        listSuperTypes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listSuperTypesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listSuperTypes);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                                                .add(tfNewType, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                                                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(spJustification, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))
                                .add(layout.createSequentialGroup()
                                        .add(btInheritance)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 148, Short.MAX_VALUE)
                                        .add(btClose)
                                        .add(8, 8, 8)
                                        .add(btHelp)))
                        .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(layout.createSequentialGroup()
                                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(tfNewType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(18, 18, 18))
                                .add(layout.createSequentialGroup()
                                        .add(spJustification, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 162, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(87, 87, 87)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(btInheritance)
                                .add(btClose)
                                .add(btHelp))
                        .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btInheritanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInheritanceActionPerformed

        String typeName = tfNewType.getText();
        if (typeName.isEmpty()) {
            return;
        }

        ObjectType superType;
        ObjectType subType;
        String selected = listSuperTypes.getSelectedValue();
        if (selected != null) {
            superType = om.getObjectType(selected);
        } else {
            superType = null;
        }
        selected = listSubTypes.getSelectedValue();
        if (selected != null) {
            subType = om.getObjectType(selected);
        } else {
            subType = null;
        }
        FactType ft = om.getFactType(typeName);
        ObjectType ot;
        if (ft == null) {
            ot = null;
        } else if (ft.isObjectType()) {
            ot = ft.getObjectType();
        } else {
            JOptionPane.showMessageDialog(this, "type refers to existing fact type which isn't an object type");
            return;
        }

        ExternalInput projectMemberInput = new ExternalInput(taJustification.getText(),
                om.getProject().getCurrentUser());

        try {
            if (superType == null) {
                if (subType == null) {
                    JOptionPane.showMessageDialog(this, "please select a super and/or subtype");
                } else {
                    // new supertype in behalf of subtype
                    om.addSuperType(typeName, subType.getName(), projectMemberInput);
                    refreshAll();
                }
            } else if (subType == null) {
                // new subtype in behalf of supertype
                if (superType.isAbstract()) {
                    if (ot == null) {
                        om.addAbstractObjectType(typeName, projectMemberInput);
                    }
                    om.addSuperType(superType.getName(), typeName, projectMemberInput);
                    refreshAll();

                } else {
                    JOptionPane.showMessageDialog(this, "abstract subtype of concrete supertype is not allowed within this context");
                }

            } else {
                // new type between super and subtype
                if (superType.isAbstract()) {
                    om.insertInheritance(typeName, superType, subType, projectMemberInput);
                    refreshAll();
                } else {
                    JOptionPane.showMessageDialog(this, "abstract subtype of concrete supertype is not allowed within this context");
                }
            }
        } catch (DuplicateException | ChangeNotAllowedException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_btInheritanceActionPerformed

    private void listSubTypesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listSubTypesValueChanged
        refreshList(listSuperTypes, listSubTypes, superModel);
    }//GEN-LAST:event_listSubTypesValueChanged

    private void listSuperTypesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listSuperTypesValueChanged
        refreshList(listSubTypes, listSuperTypes, subModel);
    }//GEN-LAST:event_listSuperTypesValueChanged

    private void btCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCloseActionPerformed
        setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_btCloseActionPerformed

    private void btHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btHelpActionPerformed
        JOptionPane.showMessageDialog(this,
                "This dialog offers the opportunity to add an abstract objecttype as a super or subtype.\n"
                + "\n"
                + "case 1: insertion of a new abstract objecttype as a subtype of an existing abstract supertype;\n"
                + "please select the abstract supertype and enter the name of the new objecttype.\n\n"
                + "case 2: insertion af a new abstract objecttype as a supertype of an existing subtype;\n"
                + "please select the subtype and enter the name of the new objecttype.\n\n "
                + "case 3: insertion of a new abstract objecttype as a subtype of an existing "
                + "abstract objecttype and a supertype of an existing subtype;\n"
                + "please select an abstract supertype and a subtype and enter the name of the new objecttype.",
                "Help on adding a new abstract objecttype", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_btHelpActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btClose;
    private javax.swing.JButton btHelp;
    private javax.swing.JButton btInheritance;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listSubTypes;
    private javax.swing.JList<String> listSuperTypes;
    private javax.swing.JScrollPane spJustification;
    private javax.swing.JTextArea taJustification;
    private javax.swing.JTextField tfNewType;
    // End of variables declaration//GEN-END:variables
}
