/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package equa.configurator;

import javax.swing.JOptionPane;

/**
 *
 * @author frankpeeters
 */
public class FrequencyDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form FrequencyDialog
     */
    public FrequencyDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("please enter minimum and maximum frequency");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();
        tfMin = new javax.swing.JTextField();
        lbMin = new javax.swing.JLabel();
        lbMax = new javax.swing.JLabel();
        tfMax = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        btCancel.setText("Cancel");
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });

        tfMin.setText("2");
        tfMin.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfMinActionPerformed(evt);
            }
        });

        lbMin.setText("min");

        lbMax.setText("max");

        tfMax.setText("2");
        tfMax.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfMaxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(okButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btCancel)
                        .add(28, 28, 28))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(lbMax)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(tfMax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(lbMin)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(tfMin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(21, 21, 21)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tfMin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lbMin))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lbMax)
                    .add(tfMax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 20, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(okButton)
                    .add(btCancel)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfMinActionPerformed
        // TODO add your handling code here:
        try {
            int min = Integer.parseInt(tfMin.getText());
            if (tfMax.getText().isEmpty()) {

                tfMax.setText(tfMin.getText());
            }
            int max = Integer.parseInt(tfMax.getText());
            if (max < 2) {
                tfMax.setText(2 + "");
                max = 2;
            }

            if (min < 0) {
                JOptionPane.showMessageDialog(getParent(),
                        "minimum frequency should be a non-negative number");
            }
        } catch (NumberFormatException exc) {
            JOptionPane.showMessageDialog(getParent(),
                    "minimum frequency should be a non-negative number");
        }
    }//GEN-LAST:event_tfMinActionPerformed

    private void tfMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfMaxActionPerformed
        try {
            int max = Integer.parseInt(tfMax.getText());
            if (tfMin.getText().isEmpty()) {

                tfMin.setText(tfMax.getText());
            }

            if (max < 2) {
                JOptionPane.showMessageDialog(getParent(),
                        "maximum frequency should be at least 2");
            }
        } catch (NumberFormatException exc) {
            JOptionPane.showMessageDialog(getParent(),
                    "maximum frequency should be a number");
        }
    }//GEN-LAST:event_tfMaxActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        try {
            int min = Integer.parseInt(tfMin.getText());
            int max = Integer.parseInt(tfMax.getText());

            if (min < 0) {
                JOptionPane.showMessageDialog(getParent(),
                        "minimum frequency cannot be negative");
                return;
            } else if (max < 2) {
                JOptionPane.showMessageDialog(getParent(),
                        "maximum frequency should be at least 2");
                return;
            } else if (max < min) {
                JOptionPane.showMessageDialog(getParent(),
                        "maximum frequency may not be smaller than the minimum frequency");
                return;
            }
            setVisible(false);
        } catch (NumberFormatException exc) {
            JOptionPane.showMessageDialog(getParent(),
                    "frequency constraint borders should be numbers");
        }

    }//GEN-LAST:event_okButtonActionPerformed

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        tfMin.setText("");
        tfMax.setText("");
        setVisible(false);
    }//GEN-LAST:event_btCancelActionPerformed

    int getMin() {
        if (tfMin.getText().isEmpty()) {
            return -1;
        } else {
            return Integer.parseInt(tfMin.getText());
        }
    }

    int getMax() {
        if (tfMax.getText().isEmpty()) {
            return -1;
        } else {
            return Integer.parseInt(tfMax.getText());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrequencyDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrequencyDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrequencyDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrequencyDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                FrequencyDialog dialog = new FrequencyDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JLabel lbMax;
    private javax.swing.JLabel lbMin;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField tfMax;
    private javax.swing.JTextField tfMin;
    // End of variables declaration//GEN-END:variables
}
