/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package equa.configurator;

import java.awt.Frame;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

import equa.meta.ChangeNotAllowedException;
import equa.meta.objectmodel.FactType;
import equa.meta.objectmodel.MandatoryConstraint;
import equa.meta.objectmodel.ObjectModel;
import equa.meta.objectmodel.ObjectRole;
import equa.meta.objectmodel.Role;
import equa.meta.objectmodel.SubstitutionType;
import equa.meta.requirements.RuleRequirement;
import equa.meta.traceability.ExternalInput;
import equa.project.ProjectRole;

/**
 *
 * @author FrankPeeters
 */
public class ObjectifyRolesDialog extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;
    private ObjectModel om;
    private FactType selectedFT;
    private FactType selectedOT;
    private List<Role> selectedRoles;
    private ProjectRole currentUser;

    public ObjectifyRolesDialog(List<Role> selectedRoles, Frame frame, ObjectModel om,
        ProjectRole currentUser) {
        initComponents();

        this.selectedRoles = selectedRoles;
        selectedFT = selectedRoles.get(0).getParent();
        this.setTitle("Objectify role(s) within " + selectedFT.getName());

        this.om = om;
        this.currentUser = currentUser;

        DefaultListModel<Role> model = new DefaultListModel<>();
        for (Role role : selectedRoles) {
            model.addElement(role);
        }
        listRoles.setModel(model);

        initListCorrespondingFactTypes(null);
    }

    private void initListCorrespondingFactTypes(FactType newFT) {
        ArrayList<SubstitutionType> substitutionTypes = new ArrayList<>();
        for (Role selectedRole : selectedRoles) {
            substitutionTypes.add(selectedRole.getSubstitutionType());
        }

        List<FactType> correspondingFactTypes = om.correspondingTypes(substitutionTypes);
        DefaultListModel<FactType> listmodel = new DefaultListModel<>();
        for (FactType ft : correspondingFactTypes) {
            listmodel.addElement(ft);
        }
        listCorrespondingFacttypes.setModel(listmodel);
        if (listmodel.size() > 0) {
            if (newFT == null) {
                listCorrespondingFacttypes.setSelectedIndex(0);
            } else {
                listCorrespondingFacttypes.setSelectedValue(newFT, true);
            }
        }
        if (listmodel.isEmpty()) {
            btNewOT.requestFocusInWindow();
        }
    }

    private int[] detectMapping() {
        List<Role> notAssignedRoles = new ArrayList<>();
        for (int i = 0; i < selectedOT.size(); i++) {
            notAssignedRoles.add(selectedOT.getRole(i));
        }
        int[] mapping = new int[selectedFT.size()];
        int i = 0;
        Iterator<Role> itRoles = selectedFT.roles();
        while (itRoles.hasNext()) {
            Role role = itRoles.next();
            if (selectedRoles.contains(role)) {
                mapping[i] = detectRoleSelectedOT(role, notAssignedRoles);
                if (mapping[i] == -1) {
                    return null;
                }
            } else {
                mapping[i] = -1;
            }
            i++;
        }
        return mapping;
    }

    private int detectRoleSelectedOT(Role role, List<Role> notAssignedRoles) {
        Role targetRole = null;
        for (Role r : notAssignedRoles) {
            if (r.getSubstitutionType().equals(role.getSubstitutionType())) {
                if (targetRole == null) {
                    targetRole = r;
                } else {
                    if (role.getRoleName().equalsIgnoreCase(r.getRoleName())) {
                        targetRole = r;
                    }
                }
            }
        }
        if (targetRole == null) {
            return -1;
        } else {
            notAssignedRoles.remove(targetRole);
            return targetRole.getNr();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CancelButton = new javax.swing.JButton();
        btObjectify = new javax.swing.JButton();
        spCorrespondingFacttypes = new javax.swing.JScrollPane();
        listCorrespondingFacttypes = new javax.swing.JList<>();
        btNewOT = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listRoles = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listOTRoles = new javax.swing.JList<>();
        btHelp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        btObjectify.setText("Objectify");
        btObjectify.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btObjectifyActionPerformed(evt);
            }
        });

        listCorrespondingFacttypes.setBorder(javax.swing.BorderFactory.createTitledBorder("corresponding fact types"));
        listCorrespondingFacttypes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listCorrespondingFacttypes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listCorrespondingFacttypesValueChanged(evt);
            }
        });
        spCorrespondingFacttypes.setViewportView(listCorrespondingFacttypes);

        btNewOT.setText("New Object Type");
        btNewOT.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNewOTActionPerformed(evt);
            }
        });

        listRoles.setBorder(javax.swing.BorderFactory.createTitledBorder("objectify role(s)"));
        listRoles.setEnabled(false);
        jScrollPane1.setViewportView(listRoles);

        listOTRoles.setBorder(javax.swing.BorderFactory.createTitledBorder("roles selected object type"));
        listOTRoles.setEnabled(false);
        jScrollPane2.setViewportView(listOTRoles);

        btHelp.setText("Help");
        btHelp.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btHelpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(spCorrespondingFacttypes, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btObjectify)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btHelp))
                    .addComponent(btNewOT))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(spCorrespondingFacttypes, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btNewOT)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btObjectify)
                    .addComponent(CancelButton)
                    .addComponent(btHelp))
                .addContainerGap()));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CancelButtonActionPerformed
    {//GEN-HEADEREND:event_CancelButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void btObjectifyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btObjectifyActionPerformed
    {//GEN-HEADEREND:event_btObjectifyActionPerformed

        if (selectedOT == null) {
            JOptionPane.showMessageDialog(this, "please select the target object type");
            return;
        }

        // mapping
        int[] mapping = detectMapping();

        if (mapping != null) {

            try {
                // merging
                ObjectRole newRole = selectedFT.mergeRoles(mapping, selectedOT.getObjectType());

                // adapting ote
                if (selectedFT.isObjectType()) {
                    EditTypeExpressionDialog dialog = new EditTypeExpressionDialog(this, selectedFT, selectedFT.getObjectType().getOTE(),
                        "Edit Object Type Expression", currentUser);
                    dialog.setVisible(true);
                }
                // adapting fte
                if (!selectedFT.isObjectType()) {
                    EditTypeExpressionDialog dialog = new EditTypeExpressionDialog(this, selectedFT, selectedFT.getFTE(),
                        "Edit Fact Type Expression", currentUser);
                    dialog.setVisible(true);
                }

                if (newRole.getSubstitutionType().isValueType()) {
                    JOptionPane.showMessageDialog(this, "mandatory constraints are only "
                        + "allowed in case of a role played by an object type");
                } else if (newRole.getSubstitutionType().isSingleton()) {
                    JOptionPane.showMessageDialog(this, "mandatory constraints are not "
                        + "allowed in case of a role played by a singleton object type");
                } else {

                // adding mandatorial constraint on new role      
                    ExternalInput input;
                    input = new ExternalInput("system design assumption", currentUser);
                    RuleRequirement rule = om.getProject().getRequirementModel().addRuleRequirement(selectedFT.getCategory(),
                        "Every <" + newRole.getSubstitutionType().getName()
                        + "> cannot exist without a fact about " + newRole.getParent().getFactTypeString() + ", without any consideration.", input);
                    new MandatoryConstraint(newRole, rule);
                }

            } catch (ChangeNotAllowedException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "problem with linking of merging roles to roles of selected object type.");
        }
        setVisible(false);
    }//GEN-LAST:event_btObjectifyActionPerformed

    private void btNewOTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNewOTActionPerformed

        NewObjectTypeDialog dialog = new NewObjectTypeDialog(this, true, om, selectedRoles, selectedFT.sources(), currentUser);
        dialog.setVisible(true);
        initListCorrespondingFactTypes(dialog.getNewFactType());
        btObjectify.requestFocus();

    }//GEN-LAST:event_btNewOTActionPerformed

    private void listCorrespondingFacttypesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listCorrespondingFacttypesValueChanged
        if (listCorrespondingFacttypes.isSelectionEmpty()) {
            selectedOT = null;
        } else {
            selectedOT = listCorrespondingFacttypes.getSelectedValue();
            if (!selectedOT.isObjectType()) {
                if (!selectedOT.isObjectifiable()) {
                    selectedOT = null;
                    JOptionPane.showMessageDialog(this, "selected fact type is not able to act like an object type");
                    return;
                }
                selectedOT.objectify();
            }
            listOTRoles.setModel(selectedOT);
        }

    }//GEN-LAST:event_listCorrespondingFacttypesValueChanged

    private void btHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btHelpActionPerformed
        JOptionPane.showMessageDialog(this, ""
            + "step 1: If needed, create an new object type.\n"
            + "step 2: Select the intended object type.\n"
            + "step 3: Press on the Objectify-button.\n");
    }//GEN-LAST:event_btHelpActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton btHelp;
    private javax.swing.JButton btNewOT;
    private javax.swing.JButton btObjectify;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<FactType> listCorrespondingFacttypes;
    private javax.swing.JList<Role> listOTRoles;
    private javax.swing.JList<Role> listRoles;
    private javax.swing.JScrollPane spCorrespondingFacttypes;
    // End of variables declaration//GEN-END:variables
}
