/*
 *
 * Created on 14-jul-2011, 13:39:19
 */
package equa.configurator;

import com.sun.javafx.font.freetype.FTFactory;
import com.vlsolutions.swing.docking.DockKey;
import com.vlsolutions.swing.docking.Dockable;
import static equa.code.ImportType.Collection;
import equa.code.operations.Operation;
import equa.desktop.Desktop;
import equa.meta.ChangeNotAllowedException;
import equa.meta.DuplicateException;
import equa.meta.Message;
import equa.meta.MismatchException;
import equa.meta.objectmodel.BaseType;
import equa.meta.objectmodel.BaseValueRole;
import equa.meta.objectmodel.CBTRole;
import equa.meta.objectmodel.ConstrainedBaseType;
import equa.meta.objectmodel.DerivableConstraint;
import equa.meta.objectmodel.ElementsFactType;
import equa.meta.objectmodel.RoleEvent;
import equa.meta.objectmodel.FactType;
import equa.meta.objectmodel.MandatoryConstraint;
import equa.meta.objectmodel.ObjectModel;
import equa.meta.objectmodel.ObjectRole;
import equa.meta.objectmodel.ObjectType;
import equa.meta.objectmodel.Role;
import equa.meta.objectmodel.Tuple;
import equa.meta.objectmodel.TupleItem;
import equa.meta.objectmodel.TypeExpression;
import equa.meta.objectmodel.UniquenessConstraint;
import equa.meta.objectmodel.Value;
import equa.meta.requirements.ActionRequirement;
import equa.meta.requirements.Requirement;
import equa.meta.requirements.RequirementModel;
import equa.meta.requirements.RuleRequirement;
import equa.meta.traceability.Category;
import equa.meta.traceability.ExternalInput;
import equa.project.ProjectMemberRole;
import equa.project.ProjectRole;
import equa.util.Naming;
import equa.gui.swing.SwingUtils;
import equa.gui.GraphicalPrefs;
import equa.gui.PreferenceOfAspect;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author frankpeeters, RuudLenders
 */
public class TypeConfigurator extends javax.swing.JPanel implements Dockable {

    private static final long serialVersionUID = 1L;
    public static final Color RELIABLE = new Color(0, 0, 102); // dark blue
    public static final Color UNRELIABLE = Color.gray;
    private ObjectModel om;
    private Frame parent;
    private DockKey key;
    private boolean reliableClasses;
    private boolean doublejDoc = false;
    // private javax.swing.JCheckBoxMenuItem miAbsractOT;

    /**
     * Creates new TypeConfigurator
     */
    public TypeConfigurator(Frame parent, ObjectModel om) {
        this.om = om;
        this.parent = parent;
        this.key = new DockKey("ObjectModel Configurator");
        this.key.setCloseEnabled(false);
        initComponents();

//        JScrollPane scrollBar = new JScrollPane(panel,
//            JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
//            JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        pnClass.setSize(splitPane.getWidth() / 2, splitPane.getHeight());
        pnFactType.setSize(splitPane.getWidth() / 2, splitPane.getHeight());
        tfFactType.setLocation(0, 0);
        tfFactType.setSize(splitPane.getWidth() / 2, 29);
        tbRoles.setLocation(0, tfFactType.getHeight());
        tbRoles.setSize(splitPane.getWidth() / 2, 75);
        pnRoles.setSize(splitPane.getWidth() / 2, 104);
        setColumnsFactTypeTable();
        this.reliableClasses = true;

        tbFactTypes.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbFactTypesMousePressed(evt);
            }
        });

        tbRoles.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbRolesMousePressed(evt);
            }
        });

    }

    public void setObjectModel(ObjectModel om) {
        this.om = om;
        tbFactTypes.setModel(new FactTypeTableModel(om));
        reliableClasses = true;
        refresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        factTypePopup = new javax.swing.JPopupMenu();
        miDerivable = new javax.swing.JCheckBoxMenuItem();
        miDefault_Boolean = new javax.swing.JCheckBoxMenuItem();
        miComparable = new javax.swing.JCheckBoxMenuItem();
        miChangeId = new javax.swing.JCheckBoxMenuItem();
        miEdit_ValueConstraint = new javax.swing.JMenuItem();
        miValueType = new javax.swing.JCheckBoxMenuItem();
        miDeleteInitializer = new javax.swing.JMenuItem();
        sFactType1 = new javax.swing.JPopupMenu.Separator();
        miRename = new javax.swing.JMenuItem();
        miTypeExpression = new javax.swing.JMenuItem();
        sFactType2 = new javax.swing.JPopupMenu.Separator();
        miRemoveFT = new javax.swing.JMenuItem();
        miObjectifyFT = new javax.swing.JMenuItem();
        miDeobjectifyFT = new javax.swing.JMenuItem();
        miInheritance = new javax.swing.JMenuItem();
        miAbstract = new javax.swing.JMenuItem();
        sFactType3 = new javax.swing.JPopupMenu.Separator();
        miSearch = new javax.swing.JMenuItem();
        rolePopup = new javax.swing.JPopupMenu();
        miUniqueness = new javax.swing.JCheckBoxMenuItem();
        miMandatory = new javax.swing.JCheckBoxMenuItem();
        miUniquenessMandatory = new javax.swing.JMenuItem();
        miFrequency = new javax.swing.JCheckBoxMenuItem();
        sRole2 = new javax.swing.JPopupMenu.Separator();
        miSettable = new javax.swing.JCheckBoxMenuItem();
        miAdjustable = new javax.swing.JCheckBoxMenuItem();
        miAddable = new javax.swing.JCheckBoxMenuItem();
        miInsertable = new javax.swing.JCheckBoxMenuItem();
        miRemovable = new javax.swing.JCheckBoxMenuItem();
        miComposition = new javax.swing.JCheckBoxMenuItem();
        miChangeBySystemEvent = new javax.swing.JCheckBoxMenuItem();
        miDeleteEventRule = new javax.swing.JMenuItem();
        sRole3 = new javax.swing.JPopupMenu.Separator();
        miNavigable = new javax.swing.JCheckBoxMenuItem();
        miHidden = new javax.swing.JCheckBoxMenuItem();
        sRole4 = new javax.swing.JPopupMenu.Separator();
        miQualifier = new javax.swing.JCheckBoxMenuItem();
        miAuto_Incr = new javax.swing.JCheckBoxMenuItem();
        sRole5 = new javax.swing.JPopupMenu.Separator();
        miDefault_Value = new javax.swing.JCheckBoxMenuItem();
        miConstrainedBaseType = new javax.swing.JMenuItem();
        sRole6 = new javax.swing.JPopupMenu.Separator();
        miRenameRole = new javax.swing.JMenuItem();
        miReplaceBTPlus = new javax.swing.JMenuItem();
        miReplaceWithSuperType = new javax.swing.JMenuItem();
        miReplaceWithSubType = new javax.swing.JMenuItem();
        miObjectifyRoles = new javax.swing.JMenuItem();
        miDeobjectifyRole = new javax.swing.JMenuItem();
        splitPane = new javax.swing.JSplitPane();
        pnFactType = new javax.swing.JPanel();
        pnRoles = new javax.swing.JPanel();
        tfFactType = new javax.swing.JTextField();
        spRoles = new javax.swing.JScrollPane(tbRoles,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
            JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        tbRoles = new javax.swing.JTable();
        spFTs = new javax.swing.JScrollPane();
        tbFactTypes = new javax.swing.JTable();
        pnClass = new javax.swing.JPanel();
        tfObjecttype = new javax.swing.JTextField();
        spOperations = new javax.swing.JScrollPane();
        lsOperations = new javax.swing.JList();

        factTypePopup.setName("factTypePopup"); // NOI18N

        miDerivable.setText("Derivable Constraint");
        miDerivable.setToolTipText("");
        miDerivable.setName("miDerivable"); // NOI18N
        miDerivable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDerivableActionPerformed(evt);
            }
        });
        factTypePopup.add(miDerivable);

        miDefault_Boolean.setSelected(true);
        miDefault_Boolean.setText("DefaultBoolean");
        miDefault_Boolean.setActionCommand("Default Boolean");
        miDefault_Boolean.setName("miDefault_Boolean"); // NOI18N
        miDefault_Boolean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDefault_BooleanActionPerformed(evt);
            }
        });
        factTypePopup.add(miDefault_Boolean);

        miComparable.setSelected(true);
        miComparable.setText("Comparable");
        miComparable.setToolTipText("Are the values ordered?");
        miComparable.setName("miComparable"); // NOI18N
        miComparable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miComparableActionPerformed(evt);
            }
        });
        factTypePopup.add(miComparable);

        miChangeId.setSelected(true);
        miChangeId.setText("Change Id");
        miChangeId.setToolTipText("");
        miChangeId.setName("miChangeId"); // NOI18N
        miChangeId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miChangeIdActionPerformed(evt);
            }
        });
        factTypePopup.add(miChangeId);

        miEdit_ValueConstraint.setText("Edit ValueConstraint");
        miEdit_ValueConstraint.setToolTipText("Adding of value constraints at Value Type ");
        miEdit_ValueConstraint.setName("miEdit_ValueConstraint"); // NOI18N
        miEdit_ValueConstraint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miEdit_ValueConstraintActionPerformed(evt);
            }
        });
        factTypePopup.add(miEdit_ValueConstraint);

        miValueType.setSelected(true);
        miValueType.setText("Value Type");
        miValueType.setToolTipText("");
        miValueType.setName("miValueType"); // NOI18N
        miValueType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miValueTypeActionPerformed(evt);
            }
        });
        factTypePopup.add(miValueType);

        miDeleteInitializer.setText("Delete Initializer");
        miDeleteInitializer.setName("miDeleteInitializer"); // NOI18N
        miDeleteInitializer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDeleteInitializerActionPerformed(evt);
            }
        });
        factTypePopup.add(miDeleteInitializer);

        sFactType1.setName("sFactType1"); // NOI18N
        factTypePopup.add(sFactType1);

        miRename.setText("Rename");
        miRename.setName("miRename"); // NOI18N
        miRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRenameActionPerformed(evt);
            }
        });
        factTypePopup.add(miRename);

        miTypeExpression.setText("Type Expression");
        miTypeExpression.setName("miTypeExpression"); // NOI18N
        miTypeExpression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miTypeExpressionActionPerformed(evt);
            }
        });
        factTypePopup.add(miTypeExpression);

        sFactType2.setName("sFactType2"); // NOI18N
        factTypePopup.add(sFactType2);

        miRemoveFT.setText("Remove");
        miRemoveFT.setName("miRemoveFT"); // NOI18N
        miRemoveFT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRemoveFTActionPerformed(evt);
            }
        });
        factTypePopup.add(miRemoveFT);

        miObjectifyFT.setText("Objectify Fact Type");
        miObjectifyFT.setToolTipText("");
        miObjectifyFT.setName("miObjectifyFT"); // NOI18N
        miObjectifyFT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miObjectifyFTActionPerformed(evt);
            }
        });
        factTypePopup.add(miObjectifyFT);

        miDeobjectifyFT.setText("Deobjectify Fact Type");
        miDeobjectifyFT.setName("miDeobjectifyFT"); // NOI18N
        miDeobjectifyFT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDeobjectifyFTActionPerformed(evt);
            }
        });
        factTypePopup.add(miDeobjectifyFT);

        miInheritance.setText("Add Inheritance");
        miInheritance.setName("miInheritance"); // NOI18N
        miInheritance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miInheritanceActionPerformed(evt);
            }
        });
        factTypePopup.add(miInheritance);

        miAbstract.setText("Add Abstract Object Type");
        miAbstract.setName("miAbstract"); // NOI18N
        miAbstract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAbstractActionPerformed(evt);
            }
        });
        factTypePopup.add(miAbstract);

        sFactType3.setName("sFactType3"); // NOI18N
        factTypePopup.add(sFactType3);

        miSearch.setText("Search Related FactType");
        miSearch.setName("miSearch"); // NOI18N
        miSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSearchActionPerformed(evt);
            }
        });
        factTypePopup.add(miSearch);

        rolePopup.setName("rolePopup"); // NOI18N

        miUniqueness.setText("Uniqueness");
        miUniqueness.setName("miUniqueness"); // NOI18N
        miUniqueness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miUniquenessActionPerformed(evt);
            }
        });
        rolePopup.add(miUniqueness);

        miMandatory.setText("Mandatory");
        miMandatory.setToolTipText("");
        miMandatory.setName("miMandatory"); // NOI18N
        miMandatory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miMandatoryActionPerformed(evt);
            }
        });
        rolePopup.add(miMandatory);

        miUniquenessMandatory.setText("Uniqueness & Mandatory");
        miUniquenessMandatory.setName("miUniquenessMandatory"); // NOI18N
        miUniquenessMandatory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miUniquenessMandatoryActionPerformed(evt);
            }
        });
        rolePopup.add(miUniquenessMandatory);

        miFrequency.setSelected(true);
        miFrequency.setText("Frequency");
        miFrequency.setName("miFrequency"); // NOI18N
        miFrequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFrequencyActionPerformed(evt);
            }
        });
        rolePopup.add(miFrequency);

        sRole2.setName("sRole2"); // NOI18N
        rolePopup.add(sRole2);

        miSettable.setText("Settable");
        miSettable.setToolTipText("");
        miSettable.setName("miSettable"); // NOI18N
        miSettable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSettableActionPerformed(evt);
            }
        });
        rolePopup.add(miSettable);

        miAdjustable.setSelected(true);
        miAdjustable.setText("Adjustable");
        miAdjustable.setName("miAdjustable"); // NOI18N
        miAdjustable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAdjustableActionPerformed(evt);
            }
        });
        rolePopup.add(miAdjustable);

        miAddable.setText("Addable");
        miAddable.setName("miAddable"); // NOI18N
        miAddable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAddableActionPerformed(evt);
            }
        });
        rolePopup.add(miAddable);

        miInsertable.setSelected(true);
        miInsertable.setText("Insertable");
        miInsertable.setName("miInsertable"); // NOI18N
        miInsertable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miInsertableActionPerformed(evt);
            }
        });
        rolePopup.add(miInsertable);

        miRemovable.setSelected(true);
        miRemovable.setText("Removable");
        miRemovable.setName("miRemovable"); // NOI18N
        miRemovable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRemovableActionPerformed(evt);
            }
        });
        rolePopup.add(miRemovable);

        miComposition.setText("Composition");
        miComposition.setName("miComposition"); // NOI18N
        miComposition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCompositionActionPerformed(evt);
            }
        });
        rolePopup.add(miComposition);

        miChangeBySystemEvent.setSelected(true);
        miChangeBySystemEvent.setText("Change by System Event");
        miChangeBySystemEvent.setName("miChangeBySystemEvent"); // NOI18N
        miChangeBySystemEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miChangeBySystemEventActionPerformed(evt);
            }
        });
        rolePopup.add(miChangeBySystemEvent);

        miDeleteEventRule.setText("Delete Event Rule");
        miDeleteEventRule.setName("miDeleteEventRule"); // NOI18N
        miDeleteEventRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDeleteEventRuleActionPerformed(evt);
            }
        });
        rolePopup.add(miDeleteEventRule);

        sRole3.setName("sRole3"); // NOI18N
        rolePopup.add(sRole3);

        miNavigable.setText("Navigable");
        miNavigable.setName("miNavigable"); // NOI18N
        miNavigable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNavigableActionPerformed(evt);
            }
        });
        rolePopup.add(miNavigable);

        miHidden.setText("Hidden");
        miHidden.setToolTipText("Does this property need publishment");
        miHidden.setName("miHidden"); // NOI18N
        miHidden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miHiddenActionPerformed(evt);
            }
        });
        rolePopup.add(miHidden);

        sRole4.setName("sRole4"); // NOI18N
        rolePopup.add(sRole4);

        miQualifier.setText("Qualifier");
        miQualifier.setToolTipText("Is this value a qualifier of another value of this fact type ");
        miQualifier.setName("miQualifier"); // NOI18N
        miQualifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miQualifierActionPerformed(evt);
            }
        });
        rolePopup.add(miQualifier);

        miAuto_Incr.setSelected(true);
        miAuto_Incr.setText("Auto Increment");
        miAuto_Incr.setName("miAuto_Incr"); // NOI18N
        miAuto_Incr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAuto_IncrActionPerformed(evt);
            }
        });
        rolePopup.add(miAuto_Incr);

        sRole5.setName("sRole5"); // NOI18N
        rolePopup.add(sRole5);

        miDefault_Value.setSelected(true);
        miDefault_Value.setText("Default Value");
        miDefault_Value.setToolTipText("");
        miDefault_Value.setName("miDefault_Value"); // NOI18N
        miDefault_Value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDefault_ValueActionPerformed(evt);
            }
        });
        rolePopup.add(miDefault_Value);

        miConstrainedBaseType.setText("Create Constrained Base Type");
        miConstrainedBaseType.setToolTipText("Are all values of this base type allowed");
        miConstrainedBaseType.setName("miConstrainedBaseType"); // NOI18N
        miConstrainedBaseType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miConstrainedBaseTypeActionPerformed(evt);
            }
        });
        rolePopup.add(miConstrainedBaseType);

        sRole6.setName("sRole6"); // NOI18N
        rolePopup.add(sRole6);

        miRenameRole.setText("Rename Role");
        miRenameRole.setName("miRenameRole"); // NOI18N
        miRenameRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRenameRoleActionPerformed(evt);
            }
        });
        rolePopup.add(miRenameRole);

        miReplaceBTPlus.setText("Replace (Constr) Base Type");
        miReplaceBTPlus.setName("miReplaceBTPlus"); // NOI18N
        miReplaceBTPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miReplaceBTPlusActionPerformed(evt);
            }
        });
        rolePopup.add(miReplaceBTPlus);

        miReplaceWithSuperType.setText("Replace By Super Type");
        miReplaceWithSuperType.setName("miReplaceWithSuperType"); // NOI18N
        miReplaceWithSuperType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miReplaceWithSuperTypeActionPerformed(evt);
            }
        });
        rolePopup.add(miReplaceWithSuperType);

        miReplaceWithSubType.setText("Replace By Sub Type");
        miReplaceWithSubType.setName("miReplaceWithSubType"); // NOI18N
        miReplaceWithSubType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miReplaceWithSubTypeActionPerformed(evt);
            }
        });
        rolePopup.add(miReplaceWithSubType);

        miObjectifyRoles.setText("Objectify Roles");
        miObjectifyRoles.setName("miObjectifyRoles"); // NOI18N
        miObjectifyRoles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miObjectifyRolesActionPerformed(evt);
            }
        });
        rolePopup.add(miObjectifyRoles);

        miDeobjectifyRole.setText("Deobjectify Role");
        miDeobjectifyRole.setName("miDeobjectifyRole"); // NOI18N
        miDeobjectifyRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDeobjectifyRoleActionPerformed(evt);
            }
        });
        rolePopup.add(miDeobjectifyRole);

        setPreferredSize(new java.awt.Dimension(2000, 1400));
        setLayout(new java.awt.BorderLayout());

        splitPane.setResizeWeight(0.75);
        splitPane.setMinimumSize(new java.awt.Dimension(544, 500));
        splitPane.setName("splitPane"); // NOI18N
        splitPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                splitPaneComponentResized(evt);
            }
        });

        pnFactType.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnFactType.setMinimumSize(new java.awt.Dimension(0, 0));
        pnFactType.setName("pnFactType"); // NOI18N
        pnFactType.setPreferredSize(new java.awt.Dimension(1500, 1654));
        pnFactType.setLayout(new java.awt.BorderLayout());

        pnRoles.setBorder(new javax.swing.border.MatteBorder(null));
        pnRoles.setName("pnRoles"); // NOI18N
        pnRoles.setPreferredSize(new java.awt.Dimension(1500, 150));
        pnRoles.setLayout(new java.awt.BorderLayout());

        tfFactType.setEditable(false);
        tfFactType.setBackground(new java.awt.Color(0, 0, 0));
        tfFactType.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        tfFactType.setForeground(new java.awt.Color(255, 255, 255));
        tfFactType.setText("No FactType Selected");
        tfFactType.setBorder(null);
        tfFactType.setName("tfFactType"); // NOI18N
        tfFactType.setPreferredSize(new java.awt.Dimension(1500, 30));
        tfFactType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfFactTypeActionPerformed(evt);
            }
        });
        pnRoles.add(tfFactType, java.awt.BorderLayout.NORTH);

        spRoles.setMinimumSize(new java.awt.Dimension(0, 0));
        spRoles.setName("spRoles"); // NOI18N
        spRoles.setViewportView(tbRoles);

        tbRoles.setBackground(new java.awt.Color(204, 204, 204));
        tbRoles.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        tbRoles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbRoles.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tbRoles.setName("tbRoles"); // NOI18N
        tbRoles.setPreferredSize(null);
        tbRoles.setRowHeight(24);
        tbRoles.setSelectionBackground(new java.awt.Color(0, 0, 153));
        tbRoles.setShowGrid(true);
        tbRoles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbRolesMousePressed(evt);
            }
        });
        spRoles.setViewportView(tbRoles);

        pnRoles.add(spRoles, java.awt.BorderLayout.CENTER);

        pnFactType.add(pnRoles, java.awt.BorderLayout.NORTH);

        spFTs.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        spFTs.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        spFTs.setName("spFTs"); // NOI18N
        spFTs.setPreferredSize(new java.awt.Dimension(1500, 1500));
        spFTs.setViewportView(tbFactTypes);

        tbFactTypes.setModel(new equa.configurator.FactTypeTableModel(om));
        tbFactTypes.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tbFactTypes.setFillsViewportHeight(true);
        tbFactTypes.setMaximumSize(null);
        tbFactTypes.setMinimumSize(null);
        tbFactTypes.setName("tbFactTypes"); // NOI18N
        tbFactTypes.setPreferredSize(null);
        tbFactTypes.setSelectionBackground(new java.awt.Color(0, 0, 153));
        tbFactTypes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbFactTypes.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                tbFactTypesComponentAdded(evt);
            }
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                tbFactTypesComponentRemoved(evt);
            }
        });
        tbFactTypes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbFactTypesMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbFactTypesMouseClicked(evt);
            }
        });
        spFTs.setViewportView(tbFactTypes);
        TableColumnModel tcm = tbFactTypes.getColumnModel();
        //tbFactTypes.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);

        tcm.getColumn(0).setMinWidth(40);
        tcm.getColumn(1).setMinWidth(100);
        tcm.getColumn(2).setMinWidth(200);
        tcm.getColumn(3).setMinWidth(50);
        tcm.getColumn(4).setMinWidth(50);

        pnFactType.add(spFTs, java.awt.BorderLayout.CENTER);

        splitPane.setLeftComponent(pnFactType);

        pnClass.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnClass.setMaximumSize(new java.awt.Dimension(1500, 2000));
        pnClass.setMinimumSize(new java.awt.Dimension(0, 0));
        pnClass.setName("pnClass"); // NOI18N
        pnClass.setLayout(new java.awt.BorderLayout());

        tfObjecttype.setEditable(false);
        tfObjecttype.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        tfObjecttype.setForeground(new java.awt.Color(0, 0, 102));
        tfObjecttype.setMinimumSize(new java.awt.Dimension(50, 29));
        tfObjecttype.setName("tfObjecttype"); // NOI18N
        tfObjecttype.setPreferredSize(new java.awt.Dimension(200, 29));
        pnClass.add(tfObjecttype, java.awt.BorderLayout.PAGE_START);

        spOperations.setBorder(javax.swing.BorderFactory.createTitledBorder("Operations Class"));
        spOperations.setMinimumSize(new java.awt.Dimension(200, 200));
        spOperations.setName("spOperations"); // NOI18N
        spOperations.setPreferredSize(new java.awt.Dimension(600, 0));

        lsOperations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lsOperations.setName("lsOperations"); // NOI18N
        lsOperations.setPreferredSize(null);
        lsOperations.setSelectionBackground(new java.awt.Color(0, 0, 153));
        lsOperations.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lsOperationsValueChanged(evt);
            }
        });
        spOperations.setViewportView(lsOperations);

        pnClass.add(spOperations, java.awt.BorderLayout.CENTER);

        splitPane.setRightComponent(pnClass);

        add(splitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    public void initPrefs(GraphicalPrefs prefs) {

        PreferenceOfAspect prefCH = prefs.getPreference("ClassHeader");
        PreferenceOfAspect prefCO = prefs.getPreference("ClassOperations");

        tfObjecttype.setFont(new Font("Lucida Grande", Font.BOLD, prefCH.getFontSize()));
        tfObjecttype.setBackground(prefCH.getBackground());
        lsOperations.setFont(new Font("Lucida Grande", Font.PLAIN, prefCO.getFontSize()));
        lsOperations.setBackground(prefCO.getBackground());
        if (reliableClasses) {
            tfObjecttype.setForeground(prefCH.getFontColor());
            lsOperations.setForeground(prefCO.getFontColor());

        } else {
            tfObjecttype.setForeground(UNRELIABLE);
            lsOperations.setForeground(UNRELIABLE);
        }

        PreferenceOfAspect prefFTs = prefs.getPreference("FactTypes");
        tbFactTypes.setFont(new Font("Lucida Grande", Font.PLAIN, prefFTs.getFontSize()));
        tbFactTypes.setBackground(prefFTs.getBackground());
        tbFactTypes.setForeground(prefFTs.getFontColor());

        PreferenceOfAspect prefFTRoles = prefs.getPreference("FactTypeOfRoles");
        tfFactType.setFont(new Font("Lucida Grande", Font.BOLD, prefFTRoles.getFontSize()));
        tfFactType.setBackground(prefFTRoles.getBackground());
        tfFactType.setForeground(prefFTRoles.getFontColor());

        PreferenceOfAspect prefRoles = prefs.getPreference("Roles");
        tbRoles.setFont(new Font("Lucida Grande", Font.PLAIN, prefRoles.getFontSize()));
        tbRoles.setBackground(prefRoles.getBackground());
        tbRoles.setForeground(prefRoles.getFontColor());
    }

    public final void refresh() {

        tbFactTypes.setVisible(false);
        if (om.getSize() > 0) {
            om.fireListChanged();
        }

        tbFactTypes.setVisible(true);

        SwingUtils.resize(tbFactTypes);
        spFTs.updateUI();

        if (om.requiresLightBehavior()) {
            ((TitledBorder) spOperations.getBorder()).setTitle("Operations Class (light version)");
        } else {
            ((TitledBorder) spOperations.getBorder()).setTitle("Operations Class (verbose version)");
        }

        FactType ft = getSelectedFactType();
        if (ft == null) {
            lsOperations.setModel(new DefaultListModel<Operation>());
            tfObjecttype.setText("");
            tfFactType.setText(" No FactType Selected");
            tbRoles.setVisible(false);
        } else {
            setRoleTableModel(ft);
            SwingUtils.resize(tbRoles);
            tbRoles.setVisible(true);
//            String roles;
//            if (ft.size() == 1) {
//                roles = "1 role";
//            } else {
//                roles = ft.size() + " roles";
//            }
            tfFactType.setText(" " + ft.getName() + " [" + ft.getExtendedKind() + "]");
            // + " with " + roles + ":"*/);

            if (ft.isClass()) {
                ObjectType ot = ft.getObjectType();
                if (ot.getCodeClass() == null) {
                    return;
                }
                lsOperations.setModel(ot.getCodeClass());
                String classtext;
                if (ot.isAbstract()) {
                    classtext = "abstract class ";
                } else if (ft.isEnum()) {
                    classtext = "enum ";
                } else {
                    classtext = "class ";
                }
                tfObjecttype.setText(classtext + ot.getName() + " " + inheritString(ot));

            } else {
                lsOperations.setModel(new DefaultListModel<Operation>());
                tfObjecttype.setText("");
            }
        }
        tbFactTypes.setPreferredScrollableViewportSize(null);
    }

    private void miRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRenameActionPerformed
        String name = JOptionPane.showInputDialog(this, "rename: " + getSelectedFactType().getName(), getSelectedFactType().getName());
        if (name == null) {
            JOptionPane.showMessageDialog(this, "Unable to rename the selected fact type.");
        } else if (!Naming.isIdentifier(name)) {
            JOptionPane.showMessageDialog(this, "Typename must fulfill the rules "
                + "of an identifier: it must begin with a letter or an underscore (_) and"
                + "may be followed by one or more letter, underscore or digit");
        } else {
            try {
                om.renameFactType(getSelectedFactType(), name);
                reliableClasses = false;
                refresh();
            } catch (DuplicateException | ChangeNotAllowedException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_miRenameActionPerformed

    private void miRemoveFTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRemoveFTActionPerformed
        FactType ft = getSelectedFactType();
        if (ft != null) {
            try {
                om.removeFactType(ft);
                reliableClasses = false;
                refresh();
            } catch (ChangeNotAllowedException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }

        }
    }//GEN-LAST:event_miRemoveFTActionPerformed

    private void miTypeExpressionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miTypeExpressionActionPerformed
        EditTypeExpressionDialog dialog;
        if (getSelectedFactType().isObjectType()) {
            dialog = new EditTypeExpressionDialog(parent, getSelectedFactType(),
                getSelectedFactType().getObjectType().getOTE(), "Edit Object Type Expression",
                om.getProject().getCurrentUser());

        } else {
            dialog = new EditTypeExpressionDialog(parent, getSelectedFactType(),
                getSelectedFactType().getFTE(), "Edit Fact Type Expression",
                om.getProject().getCurrentUser());
        }
        dialog.setVisible(true);
        refresh();
    }//GEN-LAST:event_miTypeExpressionActionPerformed

    private void miValueTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miValueTypeActionPerformed
        if (getSelectedFactType().isObjectType()) {
            ObjectType ot = getSelectedFactType().getObjectType();
            ot.setValueType(!ot.isValueType());
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miValueTypeActionPerformed

    private void miEdit_ValueConstraintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miEdit_ValueConstraintActionPerformed
        ConstrainedBaseType cbt = (ConstrainedBaseType) getSelectedFactType().getObjectType();
        ConstrainedBaseTypeDialog dialog
            = new ConstrainedBaseTypeDialog(this.parent, true, cbt);
        dialog.setVisible(true);
    }//GEN-LAST:event_miEdit_ValueConstraintActionPerformed

    private void miObjectifyFTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miObjectifyFTActionPerformed
        FactType ft = getSelectedFactType();
        if (ft != null && !ft.isObjectType()) {
            ft.objectify();
            EditTypeExpressionDialog dialog = new EditTypeExpressionDialog(this.parent, ft, ft.getObjectType().getOTE(),
                "Edit Object Type Expression", om.getProject().getCurrentUser());
            dialog.setVisible(true);
            reliableClasses = false;
            refresh();

        }
    }//GEN-LAST:event_miObjectifyFTActionPerformed

    private void miDerivableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDerivableActionPerformed
        FactType ft = getSelectedFactType();
        if (ft == null) {
            return;
        }

        DerivableDialog dialog = new DerivableDialog(parent, ft);
        dialog.setVisible(true);
        reliableClasses = false;
        refresh();

    }//GEN-LAST:event_miDerivableActionPerformed

    private void miUniquenessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miUniquenessActionPerformed
        int[] selectedValues = tbRoles.getSelectedRows();
        if (selectedValues.length == 0) {
            return;
        }
        FactType ft = getSelectedFactType();
        if (!miUniqueness.isSelected()) {
            // removing of common uniqueness constraints of selected roles
            HashSet<UniquenessConstraint> ucs = new HashSet<>();
            for (int value : selectedValues) {
                ucs.addAll(ft.getRole(value).ucs());
            }

//            ucs.addAll(ft.getRole(0).ucs());
//            for (int i = 1; i < selectedValues.length; i++) {
//                ucs.retainAll(ft.getRole(selectedValues[i]).ucs());
//            }
            for (UniquenessConstraint uc : ucs) {

                uc.remove();
                
            }
            ft.removePermissions();
            reliableClasses = false;
            refresh();
        } else {
            try {
                // adding of new uniqueness constraint
                List<Role> roles = new ArrayList<>();
                for (int i = 0; i < selectedValues.length; i++) {
                    roles.add(ft.getRole(selectedValues[i]));
                }
                String rule_text = "Two (or more) facts about " + roles.get(0).getParent().getFactTypeString()
                    + " with the same value on <"
                    + roleValues(roles) + "> are not allowed.";

                RuleRequirement rule = initRule(rule_text, ft.getCategory());

                new UniquenessConstraint(roles, rule);
                reliableClasses = false;
                refresh();
            } catch (ChangeNotAllowedException ex) {
            }
        }
    }//GEN-LAST:event_miUniquenessActionPerformed

    private void miMandatoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miMandatoryActionPerformed
        List<Role> roles = getSelectedRoles();
        if (roles.isEmpty()) {
            JOptionPane.showMessageDialog(this, "please select role");
        } else {

            try {
                Role role = roles.get(0);
                if (roles.size() == 1) {

                    if (!role.isMandatory()) {
                        if (role.getSubstitutionType().isSingleton()
                            && !role.getParent().isDerivable()) {
                            JOptionPane.showMessageDialog(this, "mandatory constraints are not "
                                + "allowed in case of a role played by a singleton object type "
                                + "(except when this fact type is derivable).");
                        } else {

                            RuleRequirement mandatoryRule
                                = initRule("Every <" + Naming.withCapital(role.getSubstitutionType().getName())
                                    + "> cannot exist without a fact about " + role.getParent().getFactTypeString() + ", without any consideration.", role.getParent().getCategory());
                            new MandatoryConstraint(role, mandatoryRule);
                        }

                    } else {
                        role.deleteMandatoryConstraint();
                    }
                    reliableClasses = false;
                    refresh();
                } else {
                    JOptionPane.showMessageDialog(this, "please select exactly one role");
                }

            } catch (ChangeNotAllowedException ex) {

                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_miMandatoryActionPerformed

    private void miNavigableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNavigableActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            role.setNavigable(miNavigable.isSelected());
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miNavigableActionPerformed

    private void miCompositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCompositionActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            role.setComposition(miComposition.isSelected());
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miCompositionActionPerformed

    private void miHiddenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miHiddenActionPerformed
        Role role = getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            role.setHidden(miHidden.isSelected());
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miHiddenActionPerformed

    private void miSettableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSettableActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            if (miSettable.isSelected()) {

                role.addSettable("");

            } else {

                role.getSettable().remove();

            }
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miSettableActionPerformed

    private void miAddableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAddableActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            if (miAddable.isSelected()) {

                role.addAddable("");
            } else {

                role.getAddable().remove();

            }
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miAddableActionPerformed

    private void miAbstractOTActionPerformed(java.awt.event.ActionEvent evt) {

        AbstractObjectTypeDialog dialog = new AbstractObjectTypeDialog(parent, true, om);
        dialog.setVisible(true);
        reliableClasses = false;
        refresh();

    }

    private void miQualifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miQualifierActionPerformed
        Role qualifierRole = getSelectedRole();
        if (qualifierRole == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            if (!qualifierRole.isQualifier()) {
                Iterator<Role> it = getSelectedFactType().roles();
                ArrayList<Role> candidates = new ArrayList<>();
                while (it.hasNext()) {
                    Role candidate = it.next();
                    List<Role> qR = new ArrayList<>();
                    qR.add(qualifierRole);
                    if (qualifierRole != candidate && candidate.isNavigable()
                        && candidate.hasCommonUniquenessWith(qR)) {
                        candidates.add(candidate);
                    }
                }
                if (candidates.isEmpty()) {
                    //searching for qualified role without uniqueness
                    Role cp = qualifierRole.getParent().counterpart(qualifierRole);
                    if (cp != null && cp.isMultiple()) {
                        candidates.add(cp);
                    }
                }
                if (candidates.isEmpty()) {
                    JOptionPane.showMessageDialog(getParent(), "there are no"
                        + " suitable matching roles that can be qualified");
                } else {
                    Role qualified = (Role) JOptionPane.showInputDialog(getParent(),
                        qualifierRole, "please select the related qualified role",
                        JOptionPane.INFORMATION_MESSAGE, null, candidates.toArray(), null);
                    if (qualified != null) {
                        qualifierRole.setQualifier((ObjectRole) qualified);
                    }
                }
            } else {
                qualifierRole.setQualifier(null);
            }
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miQualifierActionPerformed

    private void miRenameRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRenameRoleActionPerformed
        int[] numbers = tbRoles.getSelectedRows();
        if (numbers.length == 1) {
            Role role = getSelectedRole();
            String name;

            name = JOptionPane.showInputDialog(this, "please enter unique rolename", role.getRoleName());

            if (name == null) {
                return;
            }

            if (!name.isEmpty() && !Naming.isIdentifier(name)) {
                JOptionPane.showMessageDialog(this, "Rolename must fulfill the rules "
                    + "of an identifier: it must begin with a letter or an underscore (_) and"
                    + "may be followed by one or more letter, underscore or digit");
                return;
            }
            try {
                getSelectedFactType().setRoleName(name, role);
            } catch (DuplicateException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
        reliableClasses = false;
        refresh();
    }//GEN-LAST:event_miRenameRoleActionPerformed

    private void miConstrainedBaseTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miConstrainedBaseTypeActionPerformed

        // JOptionPane.showMessageDialog(this, "unsupported operation; bug fixing of value constraints realization is needed");
        try {

            int[] selectedValues = tbRoles.getSelectedRows();
            if (selectedValues.length != 1) {
                return;
            }
            BaseValueRole br = (BaseValueRole) getSelectedFactType().getRole(selectedValues[0]);

            FactType cbt = om.objectifyToConstrainedBaseType(br);
            ConstrainedBaseTypeDialog dialog
                = new ConstrainedBaseTypeDialog(this.parent, true, (ConstrainedBaseType) cbt.getObjectType());
            dialog.setVisible(true);
            reliableClasses = false;
            refresh();
        } catch (DuplicateException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_miConstrainedBaseTypeActionPerformed

    public void showMessages(String messages) {
//        spSpecification.setVisible(false);
//        taSpecification.setText(messages);
//        ((TitledBorder) spSpecification.getBorder()).setTitle("Errors and warnings");
//        spSpecification.setVisible(true);
    }

    private void lsOperationsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lsOperationsValueChanged

        Operation feature = (Operation) lsOperations.getSelectedValue();
        if (feature != null) {
            //taSpecification.setText(feature.getSpec());
            //((TitledBorder) spSpecification.getBorder()).setTitle("Specification of " + getSelectedFactType().getName() + " :: " + feature.callString());
            if (!doublejDoc) {
                JOptionPane jDoc = new JOptionPane(feature.getSpec());
                JDialog dialog = jDoc.createDialog(parent, "Specification of " + getSelectedFactType().getName() + " :: " + feature.callString());
                dialog.setModal(false);
                dialog.setVisible(true);
                doublejDoc = true;
            } else {
                doublejDoc = false;
            }
        }  /* else {
         taSpecification.setText("");
         ((TitledBorder) spSpecification.getBorder()).setTitle("Specification of Selected Operation");
         }*/

    }//GEN-LAST:event_lsOperationsValueChanged

    private void miDefault_ValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDefault_ValueActionPerformed
        int[] numbers = tbRoles.getSelectedRows();
        if (numbers.length == 1) {
            if (getSelectedRole() instanceof BaseValueRole) {
                BaseValueRole role = (BaseValueRole) getSelectedRole();
                if (role.hasDefaultValue()) {

                    role.removeDefaultValue();

                } else {
                    String value;

                    value = JOptionPane.showInputDialog(this, "please enter default "
                        + role.getSubstitutionType().getName() + " value");

                    if (value == null) {
                        return;
                    }
                    try {
                        role.setDefaultValue(value);
                    } catch (MismatchException ex) {
                        JOptionPane.showMessageDialog(this, "value "
                            + value + " is not a correct "
                            + role.getSubstitutionType().getName() + " value ("
                            + ex.getMessage() + ")");
                        return;
                    } catch (ChangeNotAllowedException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                        return;
                    }
                }
            } else if (getSelectedRole() instanceof CBTRole) {
                CBTRole role = (CBTRole) getSelectedRole();
                if (role.hasDefaultValue()) {
                    role.removeDefaultValue();
                } else {
                    String value;
                    value = JOptionPane.showInputDialog(this, "please enter default "
                        + role.getSubstitutionType().getName() + " value out of "
                        + ((ConstrainedBaseType) role.getSubstitutionType()).valuesString());

                    if (value == null) {
                        return;
                    }
                    try {
                        role.setDefaultValue(value);
                    } catch (MismatchException ex) {
                        JOptionPane.showMessageDialog(this, "value "
                            + value + " is not a correct "
                            + role.getSubstitutionType().getName() + " value("
                            + ex.getMessage() + ")");
                        return;
                    } catch (ChangeNotAllowedException ex) {
                        Logger.getLogger(TypeConfigurator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else if (getSelectedRole() instanceof ObjectRole) {
                ObjectRole role = (ObjectRole) getSelectedRole();
                if (role.hasDefaultValue()) {
                    role.removeDefaultValue();
                } else {
                    List<String> values;
                    DefaultValueDialog dialog = new DefaultValueDialog(parent, role);
                    dialog.setVisible(true);
                    values = dialog.getValues();
                    if (values == null) {
                        return;
                    }
                    Value value = null;
                    try {

                        RequirementModel rm = om.getProject().getRequirementModel();
                        ProjectRole projectRole = om.getProject().getCurrentUser();
                        Category cat = role.getParent().getCategory();
                        ExternalInput input = new ExternalInput("", projectRole);
                        RuleRequirement rule = rm.addRuleRequirement(cat, "dummy", input);
                        value = role.getSubstitutionType().parse(values, rule);
                        role.setDefaultValue(value);
                        rule.setText(input, value.toString() + " is the default value of <" + role.detectRoleName()
                            + "> in " + role.getParent().getFactTypeString());
                    } catch (MismatchException ex) {
                        JOptionPane.showMessageDialog(this, "default value "
                            + " is not a correct "
                            + role.getSubstitutionType().getName() + " value("
                            + ex.getMessage() + ")");
                        return;
                    } catch (ChangeNotAllowedException ex) {
                        Logger.getLogger(TypeConfigurator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miDefault_ValueActionPerformed

    private void miObjectifyRolesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miObjectifyRolesActionPerformed

        int[] selectedValues = tbRoles.getSelectedRows();

        if (selectedValues.length == 0) {
            return;
        }
        FactType ft = getSelectedFactType();
        List<Role> roles = new ArrayList<>();
        for (int selectedValue : selectedValues) {
            roles.add(ft.getRole(selectedValue));
        }
//        if (roles.get(0).hasCommonUniquenessWith(roles) ) {
        ObjectifyRolesDialog mergeRolesDialog = new ObjectifyRolesDialog(roles, parent, om,
            om.getProject().getCurrentUser());
        mergeRolesDialog.setVisible(true);
//        } else {
//            JOptionPane.showMessageDialog(parent, "selected roles don't have a common uniqueness constraint");
//        }
        reliableClasses = false;

        setObjectModel(om);
    }//GEN-LAST:event_miObjectifyRolesActionPerformed

    private void miRemovableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRemovableActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            if (miRemovable.isSelected()) {

                role.addRemovable("");

            } else {

                role.getRemovable().remove();

            }
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miRemovableActionPerformed

    private void miReplaceBTPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miReplaceBTPlusActionPerformed

        int[] selectedValues = tbRoles.getSelectedRows();
        if (selectedValues.length != 1) {
            return;
        }
        Role r = getSelectedRole();
        if (r instanceof ObjectRole) {
            return;
        }
        BaseValueRole role = (BaseValueRole) r;
        FactType ft = role.getParent();
        int roleNr = role.getNr();

        List<String> cbts = detectCBTs(role.getSubstitutionType());
        String[] typeNames = new String[5 + cbts.size()];
        typeNames[0] = "String";
        typeNames[1] = "Character";
        typeNames[2] = "Real";
        typeNames[3] = "Integer";
        typeNames[4] = "Natural";
        int i = 5;
        for (String cbt : cbts) {
            typeNames[i] = cbt;
            i++;
        }

        BaseTypePlusDialog dialog = new BaseTypePlusDialog(parent, true, typeNames, role.getSubstitutionType().getName());
        dialog.setVisible(true);
        if (dialog.getBaseTypePlus() != null) {
            BaseType bt = BaseType.getBaseType(dialog.getBaseTypePlus());
            if (bt != null) {
                if (role.getSubstitutionType().equals(bt)) {
                    return;
                } else {
                    Iterator<Tuple> itTuples = ft.getPopulation().tuples();
                    while (itTuples.hasNext()) {
                        TupleItem tupleItem = itTuples.next().getItem(roleNr);
                        try {
                            bt.checkSyntaxis(tupleItem.getValue().toString());
                        } catch (MismatchException ex) {
                            JOptionPane.showMessageDialog(parent, ex.getMessage());
                            return;
                        }
                    }
                    role.setBaseType(bt);
                    tbRoles.setModel(new RoleTableModel(ft));
                }
            } else {
                if (om != null) {
                    try {
                        om.objectifyToConstrainedBaseType(role, om.getFactType(dialog.getBaseTypePlus()));
                    } catch (DuplicateException ex) {
                        Logger.getLogger(TypeConfigurator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        reliableClasses = false;
        refresh();
    }//GEN-LAST:event_miReplaceBTPlusActionPerformed

    private void miDeobjectifyRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDeobjectifyRoleActionPerformed

        int[] selectedValues = tbRoles.getSelectedRows();
        if (selectedValues.length != 1) {
            return;
        }

        Role r = getSelectedRole();
        if (r instanceof BaseValueRole) {
            return;
        }

        ObjectRole role = (ObjectRole) r;
        FactType ft = role.getParent();
        try {
            ft.deobjectifyRole(role);
            reliableClasses = false;
            refresh();
        } catch (ChangeNotAllowedException ex) {
            JOptionPane.showMessageDialog(parent, ex.getMessage());
        }

    }//GEN-LAST:event_miDeobjectifyRoleActionPerformed

    private void miDeobjectifyFTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDeobjectifyFTActionPerformed
        FactType ft = getSelectedFactType();
        if (ft == null) {
            return;
        }
        if (ft.isObjectType()) {
            if (ft.getFTE() == null) {
                ft.setFTE(new TypeExpression(ft.getObjectType().getOTE()));
            }
            EditTypeExpressionDialog dialog = new EditTypeExpressionDialog(this.parent, ft, ft.getFTE(),
                "Edit Fact Type Expression", om.getProject().getCurrentUser());
            dialog.setVisible(true);
            try {
                ft.deobjectify();
                reliableClasses = false;
                refresh();
            } catch (ChangeNotAllowedException ex) {
                JOptionPane.showMessageDialog(parent, ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(parent, ft.getName() + " is not an objecttype");
        }
    }//GEN-LAST:event_miDeobjectifyFTActionPerformed

    private void miReplaceWithSuperTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miReplaceWithSuperTypeActionPerformed
        // TODO add your handling code here:
        int[] selectedValues = tbRoles.getSelectedRows();
        if (selectedValues.length != 1) {
            return;
        }

        Role r = getSelectedRole();
        if (r instanceof BaseValueRole) {
            return;
        }
        ObjectRole role = (ObjectRole) r;
        ObjectType ot = role.getSubstitutionType();
        Object[] os = ot.allSupertypes().toArray();
        if (os.length == 0) {
            JOptionPane.showMessageDialog(parent, "There are no convenient supertypes present. You can add an "
                + "abstract object type via Menu: ObjectModel --> Add Abstract Object Type");
            return;
        }
        ObjectType selected = (ObjectType) JOptionPane.showInputDialog(parent, "Choose one",
            "SuperType", JOptionPane.INFORMATION_MESSAGE, null, os, os[0]);
        if (selected == null) {
            return;
        }

        try {
            role.setSubstitutionType(selected);
            if (ot.getName().equalsIgnoreCase(role.getRoleName())) {
                try {
                    ot.getFactType().setRoleName(selected.getName(), role);
                } catch (DuplicateException ex) {
                }
            }
            reliableClasses = false;
            refresh();
        } catch (ChangeNotAllowedException ex) {
            JOptionPane.showMessageDialog(parent, ex.getMessage());
        }

    }//GEN-LAST:event_miReplaceWithSuperTypeActionPerformed

    private void miInheritanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miInheritanceActionPerformed
        InheritanceDialog dialog = new InheritanceDialog(parent, true, om);
        dialog.setVisible(true);
        reliableClasses = false;
        refresh();
    }//GEN-LAST:event_miInheritanceActionPerformed

    private void miReplaceWithSubTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miReplaceWithSubTypeActionPerformed
        int[] selectedValues = tbRoles.getSelectedRows();
        if (selectedValues.length != 1) {
            return;
        }
        Role r = getSelectedRole();
        if (r instanceof BaseValueRole) {
            return;
        }
        ObjectRole role = (ObjectRole) r;
        ObjectType ot = role.getSubstitutionType();
        Object[] os = ot.allSubtypes().toArray();
        if (os.length == 0) {
            return;
        }
        ObjectType selected = (ObjectType) JOptionPane.showInputDialog(parent, "Choose one",
            "SubType", JOptionPane.INFORMATION_MESSAGE, null, os, os[0]);
        try {
            role.setSubstitutionType(selected);
            if (ot.getName().equalsIgnoreCase(role.getRoleName())) {
                try {
                    ot.getFactType().setRoleName(selected.getName(), role);
                } catch (DuplicateException ex) {
                }
            }
            reliableClasses = false;
            refresh();
        } catch (ChangeNotAllowedException ex) {
            JOptionPane.showMessageDialog(parent, ex.getMessage());
        }

    }//GEN-LAST:event_miReplaceWithSubTypeActionPerformed

    private void tbFactTypesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbFactTypesMousePressed
        if (evt.isPopupTrigger()) {
            int clickedIndex = tbFactTypes.rowAtPoint(evt.getPoint());
            tbFactTypes.setEditingRow(clickedIndex);

            updateFactTypePopup();
            factTypePopup.show(tbFactTypes, evt.getX(), evt.getY());
        }

    }//GEN-LAST:event_tbFactTypesMousePressed

    private void tbFactTypesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbFactTypesMouseClicked
        int clickedIndex = tbFactTypes.rowAtPoint(evt.getPoint());
        tbFactTypes.setEditingRow(clickedIndex);
        refresh();
    }//GEN-LAST:event_tbFactTypesMouseClicked

    private void tbRolesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbRolesMousePressed
        if (evt.isPopupTrigger()) {
            int clickedIndex = tbRoles.rowAtPoint(evt.getPoint());
            tbRoles.setEditingRow(clickedIndex);

            updateRolePopup();
            rolePopup.show(tbRoles, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tbRolesMousePressed

    private void miUniquenessMandatoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miUniquenessMandatoryActionPerformed
        // TODO add your handling code here:
        int[] selectedValues = tbRoles.getSelectedRows();
        if (selectedValues.length != 1) {
            return;
        }
        FactType ft = getSelectedFactType();
        List<Role> roles = new ArrayList<>();

        roles.add(ft.getRole(selectedValues[0]));

        String rule_text = "Two (or more) facts about " + roles.get(0).getParent().getFactTypeString()
            + " with the same value on <"
            + roleValues(roles) + "> are not allowed.";

        RuleRequirement rule = initRule(rule_text, ft.getCategory());
        try {
            new UniquenessConstraint(roles, rule);

        } catch (ChangeNotAllowedException ex) {
            Logger.getLogger(TypeConfigurator.class
                .getName()).log(Level.SEVERE, null, ex);
        }
        reliableClasses = false;
        miMandatoryActionPerformed(evt);
    }//GEN-LAST:event_miUniquenessMandatoryActionPerformed

    private void miAdjustableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAdjustableActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            if (miAdjustable.isSelected()) {

                role.addAdjustable("");

            } else {

                role.getAdjustable().remove();

            }
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miAdjustableActionPerformed

    private void miInsertableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miInsertableActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            if (miInsertable.isSelected()) {

                role.addInsertable("");
            } else {

                role.getInsertable().remove();

            }
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miInsertableActionPerformed

    private void tfFactTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfFactTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfFactTypeActionPerformed

    private void miComparableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miComparableActionPerformed
        FactType ft = getSelectedFactType();
        if (ft.isObjectType()) {
            ObjectType ot = ft.getObjectType();
            ot.setComparable(!ot.isComparable());
            refresh();
        }
    }//GEN-LAST:event_miComparableActionPerformed

    private void tbFactTypesComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_tbFactTypesComponentAdded
        // TODO add your handling code here:
        setReliable(false);
    }//GEN-LAST:event_tbFactTypesComponentAdded

    private void tbFactTypesComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_tbFactTypesComponentRemoved
        // TODO add your handling code here:
        setReliable(false);
    }//GEN-LAST:event_tbFactTypesComponentRemoved

    private void miFrequencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFrequencyActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        }
        if (role.getFrequencyConstraint() != null) {

            role.getFrequencyConstraint().remove();

        } else {

            FrequencyDialog dialog = new FrequencyDialog(parent, true);
            dialog.setVisible(true);
            if (dialog.getMin() != -1 && dialog.getMax() != -1) {

                String ruleText;
                String roleName = role.detectRoleName();
                ruleText = "The frequency of <" + roleName + "> within the actual facts of "
                    + role.getParent().getFactTypeString()
                    + " must be in the range " + dialog.getMin() + ".." + dialog.getMax() + " (bounds included).";
                RuleRequirement rule = createRuleRequirement(ruleText, role.getParent().getCategory());
                try {
                    role.setFrequencyConstraint(dialog.getMin(), dialog.getMax(), rule);
                } catch (ChangeNotAllowedException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_miFrequencyActionPerformed

    private void miAuto_IncrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAuto_IncrActionPerformed

        Role role = getSelectedRole();
        try {
            ((BaseValueRole) role).setAutoIncrement(!role.isAutoIncr());
        } catch (ChangeNotAllowedException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_miAuto_IncrActionPerformed

    private void miDefault_BooleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDefault_BooleanActionPerformed
        // TODO add your handling code here:
        FactType ft = getSelectedFactType();
        if (ft == null) {
            return;
        }
        BooleanDialog dialog = new BooleanDialog(parent, true);
        dialog.setTitle("select false, true or undefined (empty line)");
        dialog.setVisible(true);
        ft.addDefaultValue(dialog.getBoolean());
        refresh();
    }//GEN-LAST:event_miDefault_BooleanActionPerformed

    private void miChangeIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miChangeIdActionPerformed
        // TODO add your handling code here:
        FactType ft = getSelectedFactType();
        if (ft == null) {
            return;
        }

        if (ft.isMutable()) {
            ft.deleteMutable();
        } else {
            try {
                ft.addMutable("");
            } catch (ChangeNotAllowedException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
        refresh();
    }//GEN-LAST:event_miChangeIdActionPerformed

    private void miSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSearchActionPerformed
        FactType ft = getSelectedFactType();
        if (ft == null || !ft.isObjectType()) {
            return;
        }
        ObjectType ot = ft.getObjectType();
        SearchFactTypeDialog dialog = new SearchFactTypeDialog(parent, ot);
        dialog.setVisible(true);
        FactType requested = dialog.getSelectedFactType();
        if (requested != null) {
            String name = requested.getName();
            for (int i = 0; i < tbFactTypes.getRowCount(); i++) {
                if (tbFactTypes.getValueAt(i, 1).equals(name)) {
                    Rectangle rect
                        = tbFactTypes.getCellRect(i, 1, true);
                    tbFactTypes.scrollRectToVisible(rect);
                    return;
                }
            }
        }
    }//GEN-LAST:event_miSearchActionPerformed

    private void miAbstractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAbstractActionPerformed
        AbstractObjectTypeDialog dialog = new AbstractObjectTypeDialog(parent, true, om);
        dialog.setVisible(true);
        reliableClasses = false;
        refresh();
    }//GEN-LAST:event_miAbstractActionPerformed

    private void miDeleteEventRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDeleteEventRuleActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            return;
        }

        List<RoleEvent> events = role.getEvents();
        Object[] ev = events.toArray();
        RoleEvent selected;
        if (ev.length > 1) {
            selected = (RoleEvent) JOptionPane.showInputDialog(parent, "Choose one ",
                "Event Rule to Delete", JOptionPane.INFORMATION_MESSAGE, null, ev, ev[0]);
        } else {
            selected = events.get(0);
        }
        role.removeEvent(selected.getCondition(), selected.isNegation(), selected.isExtending(),
            selected.isRemoving(), selected.isUpdating());
        refresh();

    }//GEN-LAST:event_miDeleteEventRuleActionPerformed

    private void splitPaneComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_splitPaneComponentResized
        splitPane.invalidate();
        refresh();
    }//GEN-LAST:event_splitPaneComponentResized

    private void miDeleteInitializerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDeleteInitializerActionPerformed
        FactType ft = getSelectedFactType();
        if (ft == null) {
            return;
        }

        if (ft.isObjectType()) {
            ft.getObjectType().removeInitializer();
        }
    }//GEN-LAST:event_miDeleteInitializerActionPerformed

    private void miChangeBySystemEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miChangeBySystemEventActionPerformed
        Role role = getSelectedRole();
        if (role == null) {
            return;
        }
        if (role instanceof ObjectRole) {
            ObjectRole objectRole = (ObjectRole) role;
            objectRole.setIsEventSource(!objectRole.isEventSource());
        }
    }//GEN-LAST:event_miChangeBySystemEventActionPerformed

    private FactType getSelectedFactType() {
        int row = tbFactTypes.getEditingRow();
        if (row == -1 || row >= tbFactTypes.getModel().getRowCount()) {
            return null;
        } else {
            return om.getFactType((String) tbFactTypes.getModel().getValueAt(row, 1));
        }
    }

    private Role getSelectedRole() {
        if (tbRoles.getSelectedRowCount() == 1) {
            return getSelectedFactType().getRole(tbRoles.getSelectedRow());
        } else {
            return null;
        }
    }

    private List<Role> getSelectedRoles() {
        List<Role> roles = new ArrayList<>();
        FactType ft = getSelectedFactType();
        for (int i = 0; i < tbRoles.getRowCount(); i++) {
            if (tbRoles.isRowSelected(i)) {
                roles.add(ft.getRole(i));
            }
        }
        return roles;
    }

    private String roleValues(List<Role> roles) {
        StringBuilder sb = new StringBuilder();
        sb.append(roles.get(0).getNamePlusType());
        for (int i = 1; i < roles.size(); i++) {
            sb.append(", ").append(roles.get(i).getNamePlusType());
        }
        return sb.toString();
    }

    private void updateRolePopup() {

        int[] numbers;
        numbers = tbRoles.getSelectedRows();
        if (numbers.length == 0) {
            return;
        }
        FactType ft = getSelectedFactType();
        List<Role> roles = new ArrayList<>();
        for (int nr : numbers) {
            roles.add(ft.getRole(nr));
        }
        Role firstSelectedRole = roles.get(0);
        switchOffRoleMenuItems();

        // required enabling of menu items: 
        if (ft.isGenerated()) {
            if (numbers.length == 1) {
                if (firstSelectedRole instanceof ObjectRole) {
                    ObjectRole objectRole = (ObjectRole) firstSelectedRole;
                    miAddable.setEnabled(objectRole.isCandidateAddable());
                    miRemovable.setEnabled(objectRole.isCandidateRemovable());
                }
            }
        } else {
            miUniqueness.setEnabled(!ft.isConstrainedBaseType());
            miObjectifyRoles.setEnabled(!ft.isConstrainedBaseType());
            if (numbers.length == 1) {
                miRenameRole.setEnabled(true);
                miQualifier.setEnabled(firstSelectedRole.isCandidateQualifier());
                miHidden.setEnabled(!ft.isConstrainedBaseType());
                miAuto_Incr.setEnabled(firstSelectedRole.isCandidateAutoIncr());
                if (firstSelectedRole instanceof BaseValueRole) {
                    miDefault_Value.setEnabled(firstSelectedRole.isCandidateDefaultValue());
                    miConstrainedBaseType.setEnabled(!ft.isConstrainedBaseType());
                    miReplaceBTPlus.setEnabled(true);
                } else { // ObjectRole
                    ObjectRole objectRole = (ObjectRole) firstSelectedRole;
                    if (firstSelectedRole.getSubstitutionType().isValueType()) {
                        Role cp = firstSelectedRole.getParent().counterpart(firstSelectedRole);
                        miMandatory.setEnabled(cp != null && cp.getSubstitutionType().isValueType());
                    } else {
                        miMandatory.setEnabled(true);
                        miChangeBySystemEvent.setEnabled(objectRole.isCandidateEventSource());
                        miChangeBySystemEvent.setSelected(objectRole.isEventSource());
                        miDeleteEventRule.setEnabled(!objectRole.getEvents().isEmpty());
                        //miDeleteEventRule.setSelected(!objectRole.getEvents().isEmpty());
                    }

                    miSettable.setEnabled(objectRole.isCandidateSettable());
                    miAdjustable.setEnabled(objectRole.isCandidateAdjustable());
                    miNavigable.setEnabled(true);
                    miAddable.setEnabled(objectRole.isCandidateAddable());
                    miInsertable.setEnabled(objectRole.isCandidateInsertable());
                    miRemovable.setEnabled(objectRole.isCandidateRemovable());
                    miComposition.setEnabled(objectRole.isCandidateComposition());

                    miReplaceWithSuperType.setEnabled(!ft.isGenerated());
                    miReplaceWithSubType.setEnabled(!ft.isGenerated());
                    miDeobjectifyRole.setEnabled(true);
                    miDefault_Value.setEnabled(firstSelectedRole.getSubstitutionType().isValueType());
                }
            } else {
                miMandatory.setEnabled(false);
            }
        }

        // view on value of concerning property
        selectUniqueness(numbers, ft);
        if (numbers.length == 1) {
            miUniquenessMandatory.setEnabled(miUniqueness.isEnabled() && miMandatory.isEnabled()
                && !miUniqueness.isSelected() && !miMandatory.isSelected());
            miFrequency.setEnabled(firstSelectedRole.isMultiple() || firstSelectedRole.isQualified());
            miFrequency.setSelected(firstSelectedRole.isRestrictedByFrequencyConstraint());
            miHidden.setSelected(firstSelectedRole.isHidden());
            miQualifier.setSelected(firstSelectedRole.isQualifier());
            if (firstSelectedRole instanceof BaseValueRole) {
                miDefault_Value.setSelected(firstSelectedRole.hasDefaultValue());
                miAuto_Incr.setSelected(firstSelectedRole.isAutoIncr());
            } else {
                miMandatory.setSelected(firstSelectedRole.isMandatory());
                miSettable.setSelected(firstSelectedRole.isSettable());
                miAdjustable.setSelected(firstSelectedRole.isAdjustable());
                miAddable.setSelected(firstSelectedRole.isAddable());
                miInsertable.setSelected(firstSelectedRole.isInsertable());
                miRemovable.setSelected(firstSelectedRole.isRemovable());
                miComposition.setSelected(firstSelectedRole.isComposition());
                miNavigable.setSelected(firstSelectedRole.isNavigable());
                miDefault_Value.setSelected(firstSelectedRole.hasDefaultValue());
            }
        }

        showPopupText(miAddable);
        showPopupText(miRemovable);
        showPopupText(miUniqueness);
        showPopupText(miQualifier);
        showPopupText(miHidden);
        showPopupText(miAuto_Incr);
        showPopupText(miDefault_Value);
        showPopupText(miMandatory);
        showPopupText(miSettable);
        showPopupText(miAdjustable);
        showPopupText(miNavigable);
        showPopupText(miComposition);
        showPopupText(miFrequency);
        showPopupText(miChangeBySystemEvent);

        // 
        if (ft.isCollectionType()) {
            switchOffRoleMenuItems();
        }
    }

    private void showPopupText(JCheckBoxMenuItem checkbox) {
        // showing the right text
        String name = checkbox.getName().substring(2);
        if (checkbox.isSelected()) {
            checkbox.setText("Delete " + name);
        } else {
            checkbox.setText(name);
        }
    }

    private void selectUniqueness(int[] numbers, FactType ft) {

        HashSet<UniquenessConstraint> ucs = new HashSet<>();
        ucs.addAll(ft.getRole(numbers[0]).ucs());
        for (int i = 1; i < numbers.length; i++) {
            ucs.retainAll(ft.getRole(numbers[i]).ucs());
        }
        boolean unique = false;
        Iterator<UniquenessConstraint> itUcs = ucs.iterator();
        while (itUcs.hasNext()) {
            if (itUcs.next().size() == numbers.length) {
                unique = true;
            }
        }
        miUniqueness.setSelected(unique);
    }

    private void switchOffFactTypeMenuItems() {
        miRename.setEnabled(false);
        miTypeExpression.setEnabled(false);
        miDerivable.setEnabled(false);

        miObjectifyFT.setEnabled(false);
        miDeobjectifyFT.setEnabled(false);
        miValueType.setEnabled(false);
        miEdit_ValueConstraint.setEnabled(false);
        miRemoveFT.setEnabled(false);
        miInheritance.setEnabled(false);
        miComparable.setEnabled(false);
        miAbstract.setEnabled(false);
        miSearch.setEnabled(false);
        miChangeId.setSelected(false);

        miDerivable.setSelected(false);

        miDeleteInitializer.setEnabled(false);

        miValueType.setSelected(false);
        miComparable.setSelected(false);

    }

    private void switchOffRoleMenuItems() {
        miRenameRole.setEnabled(false);
        miUniqueness.setEnabled(false);
        miUniquenessMandatory.setEnabled(false);
        miFrequency.setEnabled(false);
        miMandatory.setEnabled(false);
        miAddable.setEnabled(false);
        miAdjustable.setEnabled(false);
        miInsertable.setEnabled(false);
        miSettable.setEnabled(false);
        miRemovable.setEnabled(false);
        miComposition.setEnabled(false);
        miDeleteEventRule.setEnabled(false);
        miQualifier.setEnabled(false);
        miNavigable.setEnabled(false);
        miHidden.setEnabled(false);
        miDefault_Value.setEnabled(false);
        miConstrainedBaseType.setEnabled(false);
        miObjectifyRoles.setEnabled(false);
        miReplaceBTPlus.setEnabled(false);
        miReplaceWithSuperType.setEnabled(false);
        miReplaceWithSubType.setEnabled(false);
        miDeobjectifyRole.setEnabled(false);
        miAuto_Incr.setEnabled(false);
        miChangeBySystemEvent.setEnabled(false);

        miUniqueness.setSelected(false);
        miMandatory.setSelected(false);
        miAddable.setSelected(false);
        miSettable.setSelected(false);
        miAdjustable.setSelected(false);
        miRemovable.setSelected(false);
        miInsertable.setSelected(false);
        miComposition.setSelected(false);
        miQualifier.setSelected(false);
        miNavigable.setSelected(false);
        miHidden.setSelected(false);
        miDefault_Value.setSelected(false);
        miFrequency.setSelected(false);
        miAuto_Incr.setSelected(false);
        miChangeBySystemEvent.setSelected(false);
    }

    private RuleRequirement createRuleRequirement(String text, Category cat) {
        RequirementModel rm = om.getProject().getRequirementModel();
        ProjectRole currentUser = om.getProject().getCurrentUser();
        RuleRequirement rule = rm.addRuleRequirement(cat, text,
            new ExternalInput("", currentUser));
        return rule;
    }

    private ActionRequirement createActionRequirement(String text, Category cat) {
        RequirementModel rm = om.getProject().getRequirementModel();
        ProjectRole currentUser = om.getProject().getCurrentUser();
        ActionRequirement rule = rm.addActionRequirement(cat, text,
            new ExternalInput("", currentUser));
        return rule;
    }

    private RuleRequirement initRule(String rule_text, Category cat) {
        // bad smell:
        ExternalInput input;
        ProjectRole participant = om.getProject().getCurrentUser();
        if (participant instanceof ProjectMemberRole) {
            input = new ExternalInput("system design assumption", participant);
        } else {
            input = new ExternalInput("", participant);
        }
        RuleRequirement rule = om.getProject().getRequirementModel().addRuleRequirement(cat,
            rule_text, input);
        // end of bad smell
        return rule;
    }

    private static String inheritString(ObjectType ot) {
        String s = ot.getFactType().inheritsString();
        if (s.isEmpty()) {
            return s;
        } else {
            return "inherits " + s;
        }
    }

    private void updateFactTypePopup() {
        FactType factType = getSelectedFactType();
        if (factType == null) {
            return;
        }
        switchOffFactTypeMenuItems();
        miSearch.setEnabled(factType.isObjectType());
        miRename.setEnabled(true);
        if (factType.isGenerated()) {
            miRemoveFT.setEnabled(true);

        } else {

            miTypeExpression.setEnabled(factType.size() > 0
                || (factType.isObjectType() && factType.getObjectType().isSingleton()));

            miChangeId.setEnabled(factType.isCandidateMutable());
            miChangeId.setSelected(factType.getMutablePermission() != null);
            if (factType.isObjectType()) {
                ObjectType ot = factType.getObjectType();
                miValueType.setSelected(ot.isValueType());
                //miComparable.setEnabled(true);
                //miComparable.setSelected(ot.isComparable());
                miAbstract.setEnabled(true);

                if (factType.isCollectionType()) {
                    miTypeExpression.setEnabled(false);
                    miDeobjectifyFT.setEnabled(false);
                }

                if (factType.getObjectType().getInitializer() != null) {
                    miDeleteInitializer.setEnabled(true);
                }
                miEdit_ValueConstraint.setEnabled(factType.isConstrainedBaseType());
                miInheritance.setEnabled(!factType.isGenerated());
                miDeobjectifyFT.setEnabled(!factType.isConstrainedBaseType());
                miValueType.setEnabled(!(factType.isConstrainedBaseType() && factType.isObjectifiable()));
            } else {
                miObjectifyFT.setEnabled(factType.isObjectifiable());
                miDerivable.setEnabled(true);
                miDerivable.setSelected(factType.isDerivable());
                miDefault_Boolean.setEnabled(factType.nonQualifierSize() == 1);
                miDefault_Boolean.setSelected(factType.getDefaultValue() != null);
            }

            miRemoveFT.setEnabled(true);

        }

        showPopupText(miValueType);
        // showPopupText(miComparable);
        if (factType.isObjectType()) {
            if (miChangeId.isSelected()) {
                miChangeId.setText("Delete Change Id");
            } else {
                miChangeId.setText("Change Id");
            }
        } else {
            showPopupText(miChangeId);
        }
        showPopupText(miDefault_Boolean);

        if (factType instanceof ElementsFactType) {
            switchOffFactTypeMenuItems();
        }
    }

    @Override
    public DockKey getDockKey() {
        return key;
    }

    @Override
    public Component getComponent() {
        return this;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu factTypePopup;
    private javax.swing.JList lsOperations;
    private javax.swing.JMenuItem miAbstract;
    private javax.swing.JCheckBoxMenuItem miAddable;
    private javax.swing.JCheckBoxMenuItem miAdjustable;
    private javax.swing.JCheckBoxMenuItem miAuto_Incr;
    private javax.swing.JCheckBoxMenuItem miChangeBySystemEvent;
    private javax.swing.JCheckBoxMenuItem miChangeId;
    private javax.swing.JCheckBoxMenuItem miComparable;
    private javax.swing.JCheckBoxMenuItem miComposition;
    private javax.swing.JMenuItem miConstrainedBaseType;
    private javax.swing.JCheckBoxMenuItem miDefault_Boolean;
    private javax.swing.JCheckBoxMenuItem miDefault_Value;
    private javax.swing.JMenuItem miDeleteEventRule;
    private javax.swing.JMenuItem miDeleteInitializer;
    private javax.swing.JMenuItem miDeobjectifyFT;
    private javax.swing.JMenuItem miDeobjectifyRole;
    private javax.swing.JCheckBoxMenuItem miDerivable;
    private javax.swing.JMenuItem miEdit_ValueConstraint;
    private javax.swing.JCheckBoxMenuItem miFrequency;
    private javax.swing.JCheckBoxMenuItem miHidden;
    private javax.swing.JMenuItem miInheritance;
    private javax.swing.JCheckBoxMenuItem miInsertable;
    private javax.swing.JCheckBoxMenuItem miMandatory;
    private javax.swing.JCheckBoxMenuItem miNavigable;
    private javax.swing.JMenuItem miObjectifyFT;
    private javax.swing.JMenuItem miObjectifyRoles;
    private javax.swing.JCheckBoxMenuItem miQualifier;
    private javax.swing.JCheckBoxMenuItem miRemovable;
    private javax.swing.JMenuItem miRemoveFT;
    private javax.swing.JMenuItem miRename;
    private javax.swing.JMenuItem miRenameRole;
    private javax.swing.JMenuItem miReplaceBTPlus;
    private javax.swing.JMenuItem miReplaceWithSubType;
    private javax.swing.JMenuItem miReplaceWithSuperType;
    private javax.swing.JMenuItem miSearch;
    private javax.swing.JCheckBoxMenuItem miSettable;
    private javax.swing.JMenuItem miTypeExpression;
    private javax.swing.JCheckBoxMenuItem miUniqueness;
    private javax.swing.JMenuItem miUniquenessMandatory;
    private javax.swing.JCheckBoxMenuItem miValueType;
    private javax.swing.JPanel pnClass;
    private javax.swing.JPanel pnFactType;
    private javax.swing.JPanel pnRoles;
    private javax.swing.JPopupMenu rolePopup;
    private javax.swing.JPopupMenu.Separator sFactType1;
    private javax.swing.JPopupMenu.Separator sFactType2;
    private javax.swing.JPopupMenu.Separator sFactType3;
    private javax.swing.JPopupMenu.Separator sRole2;
    private javax.swing.JPopupMenu.Separator sRole3;
    private javax.swing.JPopupMenu.Separator sRole4;
    private javax.swing.JPopupMenu.Separator sRole5;
    private javax.swing.JPopupMenu.Separator sRole6;
    private javax.swing.JScrollPane spFTs;
    private javax.swing.JScrollPane spOperations;
    private javax.swing.JScrollPane spRoles;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTable tbFactTypes;
    private javax.swing.JTable tbRoles;
    private javax.swing.JTextField tfFactType;
    private javax.swing.JTextField tfObjecttype;
    // End of variables declaration//GEN-END:variables

    private void setColumnsFactTypeTable() {
        if (tbFactTypes.getModel() == null) {
            return;
        }
        for (String name : FactTypeTableModel.COLUMN_NAMES) {
            tbFactTypes.getColumn(name).setMinWidth(24);
        }

        tbFactTypes.getColumn(FactTypeTableModel.COLUMN_NAMES[0]).setMinWidth(30);
        tbFactTypes.getColumn(FactTypeTableModel.COLUMN_NAMES[1]).setMinWidth(150);
        tbFactTypes.getColumn(FactTypeTableModel.COLUMN_NAMES[2]).setMinWidth(360);
        tbFactTypes.getColumn(FactTypeTableModel.COLUMN_NAMES[3]).setMinWidth(50);
        tbFactTypes.getColumn(FactTypeTableModel.COLUMN_NAMES[4]).setMinWidth(50);

        JTableHeader header = tbFactTypes.getTableHeader();
        header.setToolTipText("FT = Pure Fact Type; OT = Concrete Object Type; AT = Abstract Object Type; "
            + "SG = Singleton Object Type; VT = Value Type; CB = Constrained Base Type; "
            + "SQ = Sequence Type; ST = Set Type");


    }

    public void setReliable(boolean reliable) {
        reliableClasses = reliable;
    }

    public void setReliable(List<Message> messages) {
        for (Message message : messages) {
            if (message.isError()) {
                setReliable(false);
                return;
            }
        }
        setReliable(true);
    }

    private void setRoleTableModel(FactType ft) {
        if (tbRoles.getModel() != null) {
            tbRoles.setModel(new RoleTableModel(ft));
        } else {
            tbRoles.setModel(new RoleTableModel(ft));
            for (String name : RoleTableModel.COLUMN_NAMES) {
                tbRoles.getColumn(name).setMinWidth(24);
            }

            tbRoles.getColumn(RoleTableModel.COLUMN_NAMES[0]).setPreferredWidth(60);
            tbRoles.getColumn(RoleTableModel.COLUMN_NAMES[1]).setPreferredWidth(60);
            tbRoles.revalidate();
        }
    }

    public void clear() {
        tbFactTypes.setModel(new DefaultTableModel());
        tbRoles.setModel(new DefaultTableModel());
        lsOperations.setModel(new DefaultListModel());
    }

    private List<String> detectCBTs(BaseType substitutionType) {
        List<String> cbts = new ArrayList<>();
        if (om == null) {
            return cbts;
        }

        Collection<FactType> fts = om.getFactTypes();
        for (FactType ft : fts) {
            if (ft.isConstrainedBaseType()) {
                ConstrainedBaseType cbt = (ConstrainedBaseType) ft.getObjectType();
                if (cbt.getBaseType().equals(substitutionType)) {
                    cbts.add(cbt.getName());
                }
            }
        }
        return cbts;
    }
}
